!function(){"use strict";var e=class{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputInvalidClass=e.inputInvalidClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._form=t}disableButton(e){e.disabled=!0}enableButton(e){e.disabled=!1}_showInputError(e){const t=this._form.querySelector(`#${e.id}-error`);t.textContent=e.validationMessage,t.classList.add(this._errorClass),e.classList.add(this._inputInvalidClass)}_hideInputError(e){this._form.querySelector(`#${e.id}-error`).classList.remove(this._errorClass),e.classList.remove(this._inputInvalidClass)}checkInputValidity(e,t){e.validity.valid?this._hideInputError(e,t):this._showInputError(e,t)}_checkFormValidity=()=>this.inputElements.every((e=>e.validity.valid));_toggleButtonAbility=()=>{this._checkFormValidity()?this.enableButton(this.submitButton):this.disableButton(this.submitButton)};_setEventListeners(){this.inputElements=[...this._form.querySelectorAll(this._inputSelector)],this.submitButton=this._form.querySelector(this._submitButtonSelector),this.inputElements.forEach((e=>{e.addEventListener("input",(t=>{this.checkInputValidity(e),this._toggleButtonAbility(this.inputElements)}))}))}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault(),this.disableButton(this.submitButton)})),this._setEventListeners()}},t=class{constructor(e){let{data:t,cardSelector:s,handleImageClick:o,handleTrashClick:r,handleDeleteConfirm:i,toggleLike:n}=e;this.name=t.name,this.link=t.link,this.alt=t.alt,this._id=t._id,this._cardSelector=s,this._handleImageClick=o,this._handleTrashClick=r,this._handleDeleteConfirm=i,this._toggleLike=n,this._isLiked=t.isLiked||!1}getId(){return this._id}removeCard(){this._element.remove()}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".gallery__card").cloneNode(!0)}setIsLiked(e){this._isLiked=e,this._renderLikes()}isLiked(){return this._isLiked}_renderLikes(){this._isLiked?this._likeButton.classList.add("gallery__like-button_clicked"):this._likeButton.classList.remove("gallery__like-button_clicked")}_setEventListeners(){this._likeButton.addEventListener("click",(()=>this._toggleLike())),this._trashButton.addEventListener("click",(()=>this._handleTrashClick())),this._cardPhoto.addEventListener("click",(()=>{this._handleImageClick({name:this.name,link:this.link})}))}getView(){return this._element=this._getTemplate(),this._cardPhoto=this._element.querySelector(".gallery__image"),this._likeButton=this._element.querySelector(".gallery__like-button"),this._trashButton=this._element.querySelector(".gallery__delete-button"),this._cardLabel=this._element.querySelector(".gallery__label"),this._cardPhoto.src=this.link,this._cardPhoto.alt=this.name,this._cardLabel.textContent=this.name,this._renderLikes(),this._setEventListeners(),this._element}},s=class{constructor(e,t){let{items:s,renderer:o}=e;this._items=s,this._renderer=o,this._container=document.querySelector(t)}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}addItem(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"append";"append"===t&&this._container.append(e),"prepend"===t&&this._container.prepend(e)}},o=class{constructor(e){this.modalSelector=document.querySelector(e)}open(){this.modalSelector.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this.modalSelector.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose=e=>{"Escape"===e.key&&this.close()};setEventListeners(){this.currentCloseButton=this.modalSelector.querySelector(".modal__close"),this.currentCloseButton.addEventListener("click",this.close.bind(this)),this.modalContainer=this.modalSelector.querySelector(".modal__container"),this.modalSelector.addEventListener("mousedown",(e=>{e.stopPropagation();let t=!1;(e.target===this.modalContainer||this.modalContainer.contains(e.target))&&(t=!0),!1===t&&this.close()}))}},r=class extends o{constructor(e){let{modalSelector:t,handleSubmitForm:s,loadingButtonText:o}=e;super(t),this._modalSelector=document.querySelector(t),this._modalForm=this._modalSelector.querySelector(".modal__form"),this._submitButton=this._modalForm.querySelector(".modal__submit-button"),this._buttonText=this._submitButton.textContent,this._loadingButtonText=o,this._handleSubmitForm=s}showLoading(){this._submitButton.textContent=this._loadingButtonText}hideLoading(){this._submitButton.textContent=this._buttonText}close(){this._modalForm.reset(),super.close()}_getInputValues(){const e=[...this._modalSelector.querySelectorAll(".modal__input")],t={};for(const s of e)t[s.name]=s.value;return t}setEventListeners(){this._modalForm.addEventListener("submit",(e=>{e.preventDefault(),this.data=this._getInputValues(),this._handleSubmitForm(this.data)})),super.setEventListeners()}};document.querySelector(".profile__title"),document.querySelector(".profile__subtitle");const i=document.querySelector("#title"),n=document.querySelector("#subtitle"),l=document.querySelector("#pfp-URL"),a=document.querySelector(".modal__save-button"),d=document.querySelector(".modal__create-button"),c=document.querySelector(".modal__savePfp-button"),h=document.querySelector("#profile-edit-button"),u=document.querySelector("#modal__form-person"),m=document.querySelector("#modal__form-img"),_=document.querySelector("#changePfp-modal"),p=document.querySelector("#profile-add-button"),b=new class{constructor(e){let{baseUrl:t}=e;this._baseUrl=t,this._headers={authorization:"6d7ae9eb-8869-410f-b35c-8e1dcc44f04b","Content-Type":"application/json"}}_processResponse=e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`);getInitialCards(){return fetch(`${this._baseUrl}/cards`,{method:"GET",headers:this._headers}).then(this._processResponse)}editProfile(e){let{name:t,about:s}=e;return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:t,about:s})}).then(this._processResponse)}changePfp(e){let{avatar:t}=e;return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:t})}).then(this._processResponse)}addNewCard(e){let{name:t,link:s}=e;return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:t,link:s})}).then(this._processResponse)}deleteCard(e){let{cardId:t}=e;return fetch(`${this._baseUrl}/cards/${t}`,{method:"DELETE",headers:this._headers}).then(this._processResponse)}addLike(e){let{cardId:t,isLiked:s}=e;return fetch(`${this._baseUrl}/cards/${t}/likes`,{method:"PUT",headers:this._headers,body:JSON.stringify({isLiked:s})}).then(this._processResponse)}removeLike(e){let{cardId:t}=e;return fetch(`${this._baseUrl}/cards/${t}/likes`,{method:"DELETE",headers:this._headers}).then(this._processResponse)}}({baseUrl:"https://around-api.en.tripleten-services.com/v1"}),g=new class extends o{constructor(e){super(e),this._boxPhoto=document.querySelector(".modal__box-photo"),this._boxTitle=document.querySelector(".modal__box-title")}open(e){this._boxPhoto.src=e.link,this._boxPhoto.alt=e.name,this._boxTitle.textContent=e.name,super.open()}setEventListeners(){super.setEventListeners()}}("#photo-modal"),S=e=>{g.open(e)};g.setEventListeners();const f=".gallery__grid";let L="append";const v=e=>{const s=new t({data:e,cardSelector:"#card-template",handleImageClick:S,handleTrashClick:()=>{const e=s.getId();E.setAction((()=>y(s,e))),E.open()},toggleLike:()=>{const e=s.getId(),t=s.isLiked();t?b.removeLike({cardId:e,isLiked:t}).then((t=>{s.setIsLiked(!1),console.log(`disliking: ${e}`),console.log(t)})).catch((e=>{console.error("Error. The request has failed: ",e)})):b.addLike({cardId:e,isLiked:t}).then((t=>{s.setIsLiked(!0),console.log(`liking: ${e}`),console.log(t)})).catch((e=>{console.error("Error. The request has failed: ",e)}))}}),o=s.getView();return k.addItem(o,L),{card:s,cardId:s.getId()}},k=new s({items:[],renderer:v},f),y=(e,t)=>{b.deleteCard({cardId:t}).then((s=>{console.log(s,t),e.removeCard(),console.log(`deleting: ${t}`),E.close()})).catch((e=>{console.error("Error. The request has failed: ",e)}))},E=new class extends o{constructor(e){let{modalSelector:t}=e;super(t),this._modalSelector=document.querySelector(t),this._modalForm=this._modalSelector.querySelector(".modal__form")}setAction(e){this._handleFormSubmit=e}close(){super.close()}setEventListeners(){this._modalForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit&&this._handleFormSubmit()})),super.setEventListeners()}}({modalSelector:"#confirm-modal"});E.setEventListeners(),b.getInitialCards().then((e=>{new s({items:e,renderer:v},f).renderItems()})).catch((e=>{console.error("Error. The request has failed: ",e)}));const C=new class{constructor(e){let{profileNameSelector:t,profileJobSelector:s,profilePictureSelector:o}=e;this._profileName=document.querySelector(t),this._profileJob=document.querySelector(s),this._profilePicture=document.querySelector(o)}getUserInfo(){const e={name:"",job:"",picture:""};return e.name=this._profileName.textContent,e.job=this._profileJob.textContent,e.picture=this._profilePicture.src,e}setUserInfo(e){let{name:t,job:s}=e;this._profileName.textContent=t,this._profileJob.textContent=s}setUserPicture(e){let{picture:t}=e;this._profilePicture.src=t}}({profileNameSelector:".profile__title",profileJobSelector:".profile__subtitle",profilePictureSelector:".profile__picture"}),q=new r({modalSelector:"#profile-edit-modal",handleSubmitForm:e=>{console.log(e),q.showLoading(),b.editProfile({name:e.title,about:e.subtitle}).then((t=>{console.log(t),C.setUserInfo({name:e.title,job:e.subtitle}),q.close()})).catch((e=>{console.error("Error. The request has failed: ",e)})).finally((()=>{q.hideLoading()}))},loadingButtonText:"Saving"}),I=new r({modalSelector:"#changePfp-modal",handleSubmitForm:e=>{I.showLoading(),b.changePfp({avatar:`${e.pfpURL}`}).then((t=>{console.log(t),C.setUserPicture({picture:e.pfpURL}),console.log(`changed pfp url to: ${e.pfpURL} `),I.close()})).catch((e=>{console.error("Error. The request has failed: ",e)})).finally((()=>{I.hideLoading()}))},loadingButtonText:"Saving"});document.querySelector(".profile__picture-container").addEventListener("click",(()=>{I.open(),console.log(c),c.textContent="Save";const{picture:e}=C.getUserInfo();l.value=e})),I.setEventListeners(),h.addEventListener("click",(()=>{q.open(),a.textContent="Save";const{name:e,job:t}=C.getUserInfo();i.value=e,n.value=t})),q.setEventListeners();const B=new r({modalSelector:"#img-create-modal",handleSubmitForm:e=>{B.showLoading(),console.log(e),console.log(e.imgTitle,e.imgURL),b.addNewCard({name:e.imgTitle,link:e.imgURL}).then((e=>{const t={name:e.name,link:e.link,alt:e.name,_id:e._id};L="prepend",v(t),B.close()})).catch((e=>{console.error("Error. The request has failed: ",e)})).finally((()=>{B.hideLoading()}))},loadingButtonText:"Saving"});p.addEventListener("click",(()=>{B.open(),d.textContent="Create"})),B.setEventListeners();const T={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__submit-button",inactiveButtonClass:"modal__submit-button:disabled",inputInvalidClass:"modal__input_invalid",inputErrorClass:"modal__error",errorClass:"modal__error_visible"};function x(t,s){const o=new e(t,s);return o.enableValidation(),o}x(T,u),x(T,m),x(T,_)}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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VSxDQUNkcEssS0FBTU4sRUFBS00sS0FDWEMsS0FBTVAsRUFBS08sS0FDWEMsSUFBS1IsRUFBS00sS0FDVkcsSUFBS1QsRUFBS1MsS0FFWmdDLEVBQVEsVUFDUnVGLEVBQVcwQyxHQUNYSCxFQUFhckgsT0FBTyxJQUVyQnFGLE9BQU9DLElBQ05ILFFBQVFJLE1BQU0sa0NBQW1DRCxFQUFJLElBRXREMEIsU0FBUSxLQUNQSyxFQUFhL0YsYUFBYSxHQUMxQixFQStESlQsa0JBQW1CLFdBT3JCeUIsRUFBUzdGLGlCQUFpQixTQUxKZ0wsS0FDcEJKLEVBQWF2SCxPQUNia0MsRUFBZTFHLFlBQWMsUUFBUSxJQUl2QytMLEVBQWFsSCxvQkFHYixNQUFNdEcsRUFBUyxDQUNiNk4sYUFBYyxlQUNkek4sY0FBZSxnQkFDZkUscUJBQXNCLHdCQUN0QkUsb0JBQXFCLGdDQUNyQkUsa0JBQW1CLHVCQUNuQkUsZ0JBQWlCLGVBQ2pCRSxXQUFZLHdCQUlkLFNBQVNnTixFQUF3QjlOLEVBQVErTixHQUN2QyxNQUFNQyxFQUFnQixJQUFJQyxFQUFjak8sRUFBUStOLEdBRWhELE9BREFDLEVBQWNsTCxtQkFDUGtMLENBQ1QsQ0FDMEJGLEVBQXdCOU4sRUFBUXNJLEdBQ2pDd0YsRUFBd0I5TixFQUFRdUksR0FDMUJ1RixFQUF3QjlOLEVBQVF3SSxFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJhY3RpY3VtLy4vc3JjL2NvbXBvbmVudHMvRm9ybVZhbGlkYXRvci5qcyIsIndlYnBhY2s6Ly9wcmFjdGljdW0vLi9zcmMvY29tcG9uZW50cy9DYXJkLmpzIiwid2VicGFjazovL3ByYWN0aWN1bS8uL3NyYy9jb21wb25lbnRzL1NlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vcHJhY3RpY3VtLy4vc3JjL2NvbXBvbmVudHMvTW9kYWwuanMiLCJ3ZWJwYWNrOi8vcHJhY3RpY3VtLy4vc3JjL2NvbXBvbmVudHMvTW9kYWxXaXRoRm9ybS5qcyIsIndlYnBhY2s6Ly9wcmFjdGljdW0vLi9zcmMvdXRpbHMvY29uc3RhbnRzLmpzIiwid2VicGFjazovL3ByYWN0aWN1bS8uL3NyYy9wYWdlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9wcmFjdGljdW0vLi9zcmMvY29tcG9uZW50cy9BcGkuanMiLCJ3ZWJwYWNrOi8vcHJhY3RpY3VtLy4vc3JjL2NvbXBvbmVudHMvTW9kYWxXaXRoSW1hZ2UuanMiLCJ3ZWJwYWNrOi8vcHJhY3RpY3VtLy4vc3JjL2NvbXBvbmVudHMvTW9kYWxXaXRoQ29uZmlybS5qcyIsIndlYnBhY2s6Ly9wcmFjdGljdW0vLi9zcmMvY29tcG9uZW50cy9Vc2VySW5mby5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvL21ha2UgYSBjbGFzcyBjYWxsZWQgRm9ybVZhbGlkYXRvclxuY2xhc3MgRm9ybVZhbGlkYXRvciB7XG4gIC8vYWxsIGNsYXNzZXMgaGF2ZSBhIGNvbnN0cnVjdG9yXG4gIGNvbnN0cnVjdG9yKGNvbmZpZywgZm9ybUVsZW1lbnQpIHtcbiAgICB0aGlzLl9pbnB1dFNlbGVjdG9yID0gY29uZmlnLmlucHV0U2VsZWN0b3I7XG4gICAgdGhpcy5fc3VibWl0QnV0dG9uU2VsZWN0b3IgPSBjb25maWcuc3VibWl0QnV0dG9uU2VsZWN0b3I7XG4gICAgdGhpcy5faW5hY3RpdmVCdXR0b25DbGFzcyA9IGNvbmZpZy5pbmFjdGl2ZUJ1dHRvbkNsYXNzO1xuICAgIHRoaXMuX2lucHV0SW52YWxpZENsYXNzID0gY29uZmlnLmlucHV0SW52YWxpZENsYXNzO1xuICAgIHRoaXMuX2lucHV0RXJyb3JDbGFzcyA9IGNvbmZpZy5pbnB1dEVycm9yQ2xhc3M7XG4gICAgdGhpcy5fZXJyb3JDbGFzcyA9IGNvbmZpZy5lcnJvckNsYXNzO1xuICAgIHRoaXMuX2Zvcm0gPSBmb3JtRWxlbWVudDtcbiAgfVxuICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gICAgbW92ZSBmdW5jdGlvbnMgZnJvbSBpbmRleCB0byBoZXJlLCBhbmQgdXNlIFwidGhpc1wiXG4gICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbiAgLy91bml2ZXJzYWwgZ2xvYmFsIGZ1bmN0aW9uIHRvIGRpc2FibGUgYnV0dG9uc1xuICBkaXNhYmxlQnV0dG9uKGJ1dHRvbikge1xuICAgIGJ1dHRvbi5kaXNhYmxlZCA9IHRydWU7XG4gIH1cbiAgLy91bml2ZXJzYWwgZnVuY3Rpb24gdG8gZW5hYmxlIGJ1dHRvbnNcbiAgZW5hYmxlQnV0dG9uKGJ1dHRvbikge1xuICAgIGJ1dHRvbi5kaXNhYmxlZCA9IGZhbHNlO1xuICB9XG5cbiAgLy9mdW5jdGlvbiB0byBzaG93IGlucHV0IGVycm9yXG4gIF9zaG93SW5wdXRFcnJvcihpbnB1dEVsZW1lbnQpIHtcbiAgICBjb25zdCBlcnJvck1lc3NhZ2VFbGVtZW50ID0gdGhpcy5fZm9ybS5xdWVyeVNlbGVjdG9yKFxuICAgICAgYCMke2lucHV0RWxlbWVudC5pZH0tZXJyb3JgXG4gICAgKTtcbiAgICBlcnJvck1lc3NhZ2VFbGVtZW50LnRleHRDb250ZW50ID0gaW5wdXRFbGVtZW50LnZhbGlkYXRpb25NZXNzYWdlO1xuICAgIGVycm9yTWVzc2FnZUVsZW1lbnQuY2xhc3NMaXN0LmFkZCh0aGlzLl9lcnJvckNsYXNzKTtcbiAgICBpbnB1dEVsZW1lbnQuY2xhc3NMaXN0LmFkZCh0aGlzLl9pbnB1dEludmFsaWRDbGFzcyk7XG4gIH1cbiAgLy9mdW5jdGlvbiB0byBoaWRlIGlucHVyIGVycm9yXG4gIF9oaWRlSW5wdXRFcnJvcihpbnB1dEVsZW1lbnQpIHtcbiAgICBjb25zdCBlcnJvck1lc3NhZ2VFbGVtZW50ID0gdGhpcy5fZm9ybS5xdWVyeVNlbGVjdG9yKFxuICAgICAgYCMke2lucHV0RWxlbWVudC5pZH0tZXJyb3JgXG4gICAgKTtcbiAgICBlcnJvck1lc3NhZ2VFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5fZXJyb3JDbGFzcyk7XG4gICAgaW5wdXRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5faW5wdXRJbnZhbGlkQ2xhc3MpO1xuICB9XG4gIC8vZnVuY3Rpb24gdG8gY2hlY2sgaW5wdXQgdmFsaWRpdHlcbiAgY2hlY2tJbnB1dFZhbGlkaXR5KGlucHV0RWxlbWVudCwgb3B0aW9ucykge1xuICAgIGlmICghaW5wdXRFbGVtZW50LnZhbGlkaXR5LnZhbGlkKSB7XG4gICAgICB0aGlzLl9zaG93SW5wdXRFcnJvcihpbnB1dEVsZW1lbnQsIG9wdGlvbnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9oaWRlSW5wdXRFcnJvcihpbnB1dEVsZW1lbnQsIG9wdGlvbnMpO1xuICAgIH1cbiAgfVxuXG4gIC8vdGhlIFwidGhpcy5pbnB1dEVsZW1lbnRzXCIgaXMgZGVmaW5lZCBhcyBhbiBhcnJheSB1c2luZyBbXSBpbiBfc2V0RXZlbnRMaXN0ZW5lcnMoKVxuICBfY2hlY2tGb3JtVmFsaWRpdHkgPSAoKSA9PiB7XG4gICAgcmV0dXJuIHRoaXMuaW5wdXRFbGVtZW50cy5ldmVyeSgoaW5wdXQpID0+IGlucHV0LnZhbGlkaXR5LnZhbGlkKTtcbiAgfTtcblxuICBfdG9nZ2xlQnV0dG9uQWJpbGl0eSA9ICgpID0+IHtcbiAgICBjb25zdCBpc0Zvcm1WYWxpZCA9IHRoaXMuX2NoZWNrRm9ybVZhbGlkaXR5KCk7XG4gICAgaWYgKCFpc0Zvcm1WYWxpZCkge1xuICAgICAgdGhpcy5kaXNhYmxlQnV0dG9uKHRoaXMuc3VibWl0QnV0dG9uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5lbmFibGVCdXR0b24odGhpcy5zdWJtaXRCdXR0b24pO1xuICAgIH1cbiAgfTtcbiAgLy9hZGRFdmVudExpc3RlbmVyc1xuICBfc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgLy9ub3csIHRoaXMgaXMgdXNlZCB0byByZWZlciB0byB0aGUgb2JqZWN0IGluIHF1ZXN0aW9uLCBzbyBpdHMgcHJvcGVydGllcyBhcmUgYWxzbyBhYmxlIHRvIGJlIHJlZmVycmVkIHRvLlxuICAgIHRoaXMuaW5wdXRFbGVtZW50cyA9IFsuLi50aGlzLl9mb3JtLnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy5faW5wdXRTZWxlY3RvcildO1xuICAgIHRoaXMuc3VibWl0QnV0dG9uID0gdGhpcy5fZm9ybS5xdWVyeVNlbGVjdG9yKHRoaXMuX3N1Ym1pdEJ1dHRvblNlbGVjdG9yKTtcblxuICAgIHRoaXMuaW5wdXRFbGVtZW50cy5mb3JFYWNoKChpbnB1dEVsZW1lbnQpID0+IHtcbiAgICAgIGlucHV0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgKGV2dCkgPT4ge1xuICAgICAgICB0aGlzLmNoZWNrSW5wdXRWYWxpZGl0eShpbnB1dEVsZW1lbnQpO1xuICAgICAgICB0aGlzLl90b2dnbGVCdXR0b25BYmlsaXR5KHRoaXMuaW5wdXRFbGVtZW50cyk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vZW5hYmxlVmFsaWRhdGlvblxuICBlbmFibGVWYWxpZGF0aW9uKCkge1xuICAgIHRoaXMuX2Zvcm0uYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCAoZXZ0KSA9PiB7XG4gICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIC8vZGlzYWJsZSB0aGUgYnV0dG9uIG9uIGEgc3VjY2Vzc2Z1bCBzdWJtaXRcbiAgICAgIHRoaXMuZGlzYWJsZUJ1dHRvbih0aGlzLnN1Ym1pdEJ1dHRvbik7XG4gICAgfSk7XG4gICAgdGhpcy5fc2V0RXZlbnRMaXN0ZW5lcnMoKTtcbiAgfVxufSAvLyBlbmQgb2YgY2xhc3MgRm9ybVZhbGlkYXRvclxuXG5leHBvcnQgZGVmYXVsdCBGb3JtVmFsaWRhdG9yO1xuIiwiLy9yZXBsYWNlcyB0aGUgZ2V0Q2FyZEVsZW1lbnQgZnVuY3Rpb25cbmNsYXNzIENhcmQge1xuICBjb25zdHJ1Y3Rvcih7XG4gICAgZGF0YSxcbiAgICBjYXJkU2VsZWN0b3IsXG4gICAgaGFuZGxlSW1hZ2VDbGljayxcbiAgICBoYW5kbGVUcmFzaENsaWNrLFxuICAgIGhhbmRsZURlbGV0ZUNvbmZpcm0sXG4gICAgdG9nZ2xlTGlrZSxcbiAgfSkge1xuICAgIHRoaXMubmFtZSA9IGRhdGEubmFtZTtcbiAgICB0aGlzLmxpbmsgPSBkYXRhLmxpbms7XG4gICAgdGhpcy5hbHQgPSBkYXRhLmFsdDtcbiAgICB0aGlzLl9pZCA9IGRhdGEuX2lkO1xuICAgIHRoaXMuX2NhcmRTZWxlY3RvciA9IGNhcmRTZWxlY3RvcjtcbiAgICB0aGlzLl9oYW5kbGVJbWFnZUNsaWNrID0gaGFuZGxlSW1hZ2VDbGljaztcbiAgICB0aGlzLl9oYW5kbGVUcmFzaENsaWNrID0gaGFuZGxlVHJhc2hDbGljaztcbiAgICB0aGlzLl9oYW5kbGVEZWxldGVDb25maXJtID0gaGFuZGxlRGVsZXRlQ29uZmlybTtcbiAgICB0aGlzLl90b2dnbGVMaWtlID0gdG9nZ2xlTGlrZTtcbiAgICB0aGlzLl9pc0xpa2VkID0gZGF0YS5pc0xpa2VkIHx8IGZhbHNlO1xuICB9XG5cbiAgZ2V0SWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2lkO1xuICB9XG4gIHJlbW92ZUNhcmQoKSB7XG4gICAgdGhpcy5fZWxlbWVudC5yZW1vdmUoKTtcbiAgfVxuICAvL2Nsb25lIHRoZSB0ZW1wbGF0ZSBlbGVtZW50IHdpdGggYWxsIGl0cyBjb250ZW50XG4gIF9nZXRUZW1wbGF0ZSgpIHtcbiAgICByZXR1cm4gZG9jdW1lbnRcbiAgICAgIC5xdWVyeVNlbGVjdG9yKHRoaXMuX2NhcmRTZWxlY3RvcilcbiAgICAgIC5jb250ZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZ2FsbGVyeV9fY2FyZFwiKVxuICAgICAgLmNsb25lTm9kZSh0cnVlKTtcbiAgfVxuXG4gIC8vbGlrZSBjb2RlOlxuXG4gIHNldElzTGlrZWQoaXNMaWtlZCkge1xuICAgIHRoaXMuX2lzTGlrZWQgPSBpc0xpa2VkO1xuICAgIHRoaXMuX3JlbmRlckxpa2VzKCk7XG4gIH1cblxuICBpc0xpa2VkKCkge1xuICAgIHJldHVybiB0aGlzLl9pc0xpa2VkO1xuICB9XG5cbiAgX3JlbmRlckxpa2VzKCkge1xuICAgIGlmICh0aGlzLl9pc0xpa2VkKSB7XG4gICAgICB0aGlzLl9saWtlQnV0dG9uLmNsYXNzTGlzdC5hZGQoXCJnYWxsZXJ5X19saWtlLWJ1dHRvbl9jbGlja2VkXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9saWtlQnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoXCJnYWxsZXJ5X19saWtlLWJ1dHRvbl9jbGlja2VkXCIpO1xuICAgIH1cbiAgfVxuXG4gIF9zZXRFdmVudExpc3RlbmVycygpIHtcbiAgICB0aGlzLl9saWtlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB0aGlzLl90b2dnbGVMaWtlKCkpO1xuICAgIHRoaXMuX3RyYXNoQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB0aGlzLl9oYW5kbGVUcmFzaENsaWNrKCkpO1xuICAgIHRoaXMuX2NhcmRQaG90by5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgICAgdGhpcy5faGFuZGxlSW1hZ2VDbGljayh7IG5hbWU6IHRoaXMubmFtZSwgbGluazogdGhpcy5saW5rIH0pO1xuICAgIH0pO1xuICB9XG4gIGdldFZpZXcoKSB7XG4gICAgdGhpcy5fZWxlbWVudCA9IHRoaXMuX2dldFRlbXBsYXRlKCk7XG4gICAgdGhpcy5fY2FyZFBob3RvID0gdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmdhbGxlcnlfX2ltYWdlXCIpO1xuICAgIHRoaXMuX2xpa2VCdXR0b24gPSB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZ2FsbGVyeV9fbGlrZS1idXR0b25cIik7XG4gICAgdGhpcy5fdHJhc2hCdXR0b24gPSB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZ2FsbGVyeV9fZGVsZXRlLWJ1dHRvblwiKTtcbiAgICB0aGlzLl9jYXJkTGFiZWwgPSB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZ2FsbGVyeV9fbGFiZWxcIik7XG4gICAgdGhpcy5fY2FyZFBob3RvLnNyYyA9IHRoaXMubGluaztcbiAgICB0aGlzLl9jYXJkUGhvdG8uYWx0ID0gdGhpcy5uYW1lO1xuICAgIHRoaXMuX2NhcmRMYWJlbC50ZXh0Q29udGVudCA9IHRoaXMubmFtZTtcbiAgICB0aGlzLl9yZW5kZXJMaWtlcygpO1xuICAgIHRoaXMuX3NldEV2ZW50TGlzdGVuZXJzKCk7XG4gICAgcmV0dXJuIHRoaXMuX2VsZW1lbnQ7XG4gIH1cbn0gLy9lbmQgb2YgY2xhc3MgQ2FyZFxuXG5leHBvcnQgZGVmYXVsdCBDYXJkO1xuIiwiY2xhc3MgU2VjdGlvbiB7XG4gIGNvbnN0cnVjdG9yKHsgaXRlbXMsIHJlbmRlcmVyIH0sIGNvbnRhaW5lclNlbGVjdG9yKSB7XG4gICAgLy9cbiAgICB0aGlzLl9pdGVtcyA9IGl0ZW1zO1xuICAgIHRoaXMuX3JlbmRlcmVyID0gcmVuZGVyZXI7XG4gICAgdGhpcy5fY29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihjb250YWluZXJTZWxlY3Rvcik7XG4gIH1cblxuICByZW5kZXJJdGVtcygpIHtcbiAgICAvL2NhbGwgdGhlIHJlbmRlcmVyKCkgZnVuY3Rpb24gb24gZWFjaCBpdGVtXG4gICAgdGhpcy5faXRlbXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgdGhpcy5fcmVuZGVyZXIoaXRlbSk7XG4gICAgfSk7XG4gIH1cblxuICBhZGRJdGVtKGl0ZW0sIHBsYWNlID0gXCJhcHBlbmRcIikge1xuICAgIC8vYWxsb3dzIHRoZSBuZXcgc3VibWl0dGVkIGNhcmQgaXMgcHJlcGVuZGVkICYgaW5pdGlhbCBjYXJkcyBhcmUgYXBwZW5kZWRcbiAgICBpZiAocGxhY2UgPT09IFwiYXBwZW5kXCIpIHtcbiAgICAgIHRoaXMuX2NvbnRhaW5lci5hcHBlbmQoaXRlbSk7XG4gICAgfVxuICAgIGlmIChwbGFjZSA9PT0gXCJwcmVwZW5kXCIpIHtcbiAgICAgIHRoaXMuX2NvbnRhaW5lci5wcmVwZW5kKGl0ZW0pO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBTZWN0aW9uO1xuIiwiY2xhc3MgTW9kYWwge1xuICBjb25zdHJ1Y3Rvcihtb2RhbFNlbGVjdG9yKSB7XG4gICAgLy9tYWtlIHN1cmUgdGhlIHBhcmVudCB1c2VzIGdsb2JhbCBub3QgcHJpdmF0ZSBzbyBjaGlsZGVuIGNhbiB1c2UgaXQuXG4gICAgdGhpcy5tb2RhbFNlbGVjdG9yID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihtb2RhbFNlbGVjdG9yKTtcbiAgfVxuICBvcGVuKCkge1xuICAgIHRoaXMubW9kYWxTZWxlY3Rvci5jbGFzc0xpc3QuYWRkKFwibW9kYWxfb3BlbmVkXCIpO1xuICAgIC8vc3RhcnRzIHRvIGxpc3RlbiBmb3IgZXNjXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgdGhpcy5faGFuZGxlRXNjQ2xvc2UpO1xuICB9XG4gIGNsb3NlKCkge1xuICAgIC8vY2xvc2VzIG1vZGFsXG4gICAgdGhpcy5tb2RhbFNlbGVjdG9yLmNsYXNzTGlzdC5yZW1vdmUoXCJtb2RhbF9vcGVuZWRcIik7XG4gICAgLy9zdG9wcyBsaXN0ZW5pbmcgZm9yIGVzY1xuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMuX2hhbmRsZUVzY0Nsb3NlKTtcbiAgfVxuICBfaGFuZGxlRXNjQ2xvc2UgPSAoZXZ0KSA9PiB7XG4gICAgaWYgKGV2dC5rZXkgPT09IFwiRXNjYXBlXCIpIHtcbiAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICB9XG4gIH07XG4gIHNldEV2ZW50TGlzdGVuZXJzKCkge1xuICAgIHRoaXMuY3VycmVudENsb3NlQnV0dG9uID0gdGhpcy5tb2RhbFNlbGVjdG9yLnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWxfX2Nsb3NlXCIpO1xuICAgIHRoaXMuY3VycmVudENsb3NlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLmNsb3NlLmJpbmQodGhpcykpO1xuICAgIHRoaXMubW9kYWxDb250YWluZXIgPSB0aGlzLm1vZGFsU2VsZWN0b3IucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9fY29udGFpbmVyXCIpO1xuICAgIHRoaXMubW9kYWxTZWxlY3Rvci5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIChldnQpID0+IHtcbiAgICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIC8vbWFrZSB2YXJpYWJsZSB0byBrbm93IGlmIGluc2lkZSBtb2RhbCBjb250YWluZXIgb3Igbm90XG4gICAgICBsZXQgaXNJbnNpZGVDb250YWluZXIgPSBmYWxzZTtcbiAgICAgIGlmIChcbiAgICAgICAgZXZ0LnRhcmdldCA9PT0gdGhpcy5tb2RhbENvbnRhaW5lciB8fFxuICAgICAgICB0aGlzLm1vZGFsQ29udGFpbmVyLmNvbnRhaW5zKGV2dC50YXJnZXQpXG4gICAgICApIHtcbiAgICAgICAgaXNJbnNpZGVDb250YWluZXIgPSB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKGlzSW5zaWRlQ29udGFpbmVyID09PSBmYWxzZSkge1xuICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTW9kYWw7XG4iLCJpbXBvcnQgTW9kYWwgZnJvbSBcIi4vTW9kYWwuanNcIjtcblxuY2xhc3MgTW9kYWxXaXRoRm9ybSBleHRlbmRzIE1vZGFsIHtcbiAgY29uc3RydWN0b3IoeyBtb2RhbFNlbGVjdG9yLCBoYW5kbGVTdWJtaXRGb3JtLCBsb2FkaW5nQnV0dG9uVGV4dCB9KSB7XG4gICAgc3VwZXIobW9kYWxTZWxlY3Rvcik7XG4gICAgdGhpcy5fbW9kYWxTZWxlY3RvciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IobW9kYWxTZWxlY3Rvcik7XG4gICAgdGhpcy5fbW9kYWxGb3JtID0gdGhpcy5fbW9kYWxTZWxlY3Rvci5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19mb3JtXCIpO1xuICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbiA9IHRoaXMuX21vZGFsRm9ybS5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19zdWJtaXQtYnV0dG9uXCIpO1xuICAgIHRoaXMuX2J1dHRvblRleHQgPSB0aGlzLl9zdWJtaXRCdXR0b24udGV4dENvbnRlbnQ7XG4gICAgdGhpcy5fbG9hZGluZ0J1dHRvblRleHQgPSBsb2FkaW5nQnV0dG9uVGV4dDtcbiAgICB0aGlzLl9oYW5kbGVTdWJtaXRGb3JtID0gaGFuZGxlU3VibWl0Rm9ybTtcbiAgfVxuXG4gIHNob3dMb2FkaW5nKCkge1xuICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbi50ZXh0Q29udGVudCA9IHRoaXMuX2xvYWRpbmdCdXR0b25UZXh0O1xuICB9XG4gIGhpZGVMb2FkaW5nKCkge1xuICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbi50ZXh0Q29udGVudCA9IHRoaXMuX2J1dHRvblRleHQ7XG4gIH1cblxuICBjbG9zZSgpIHtcbiAgICB0aGlzLl9tb2RhbEZvcm0ucmVzZXQoKTtcbiAgICBzdXBlci5jbG9zZSgpO1xuICB9XG5cbiAgLy9tYWRlIGNvbW1lbnRzIHRvIGxlYXJuIGZyb20gbWlzdGFrZXNcbiAgLy9mdW5jdGlvbiB0byBnZXQgdGhlIHZhbHVlcyBvZiBldmVyeSBpbnB1dFxuICBfZ2V0SW5wdXRWYWx1ZXMoKSB7XG4gICAgLy9nZXRzIGFsbCBpbnB1dHMgYXMgYW4gYXJyYXlcbiAgICBjb25zdCBpbnB1dExpc3QgPSBbXG4gICAgICAuLi50aGlzLl9tb2RhbFNlbGVjdG9yLnF1ZXJ5U2VsZWN0b3JBbGwoXCIubW9kYWxfX2lucHV0XCIpLFxuICAgIF07XG5cbiAgICAvL21ha2UgYW4gb2JqZWN0IHRvIGNvbnRhaW4gdGhlIHZhbHVlc1xuICAgIGNvbnN0IGlucHV0VmFsdWVzID0ge307XG5cbiAgICAvL2dvZXMgdGhvdWdoIHRoZSBpbnB1dCBsaXN0IGFycmF5LCB0aGVuIGFzc2lnbnMgdGhlIGF0dHJpYnV0ZXMgZm9yIGVhY2ggaW5wdXRcbiAgICBmb3IgKGNvbnN0IGlucHV0IG9mIGlucHV0TGlzdCkge1xuICAgICAgaW5wdXRWYWx1ZXNbaW5wdXQubmFtZV0gPSBpbnB1dC52YWx1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gaW5wdXRWYWx1ZXM7XG4gIH1cbiAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgdGhpcy5fbW9kYWxGb3JtLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgKGV2dCkgPT4ge1xuICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB0aGlzLmRhdGEgPSB0aGlzLl9nZXRJbnB1dFZhbHVlcygpO1xuICAgICAgdGhpcy5faGFuZGxlU3VibWl0Rm9ybSh0aGlzLmRhdGEpO1xuICAgIH0pO1xuICAgIHN1cGVyLnNldEV2ZW50TGlzdGVuZXJzKCk7XG4gIH1cbn1cbmV4cG9ydCBkZWZhdWx0IE1vZGFsV2l0aEZvcm07XG4iLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5WYXJpYWJsZXNcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbmV4cG9ydCBjb25zdCBwcm9maWxlVGl0bGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnByb2ZpbGVfX3RpdGxlXCIpO1xuZXhwb3J0IGNvbnN0IHByb2ZpbGVTdWJUaXRsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucHJvZmlsZV9fc3VidGl0bGVcIik7XG5leHBvcnQgY29uc3QgaW5wdXRUaXRsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjdGl0bGVcIik7XG5leHBvcnQgY29uc3QgaW5wdXRTdWJUaXRsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjc3VidGl0bGVcIik7XG5leHBvcnQgY29uc3QgaW5wdXRQaWN0dXJlVXJsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNwZnAtVVJMXCIpO1xuZXhwb3J0IGNvbnN0IHByb2ZpbGVTYXZlQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9fc2F2ZS1idXR0b25cIik7XG5leHBvcnQgY29uc3QgY2FyZFNhdmVCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19jcmVhdGUtYnV0dG9uXCIpO1xuZXhwb3J0IGNvbnN0IHBmcFNhdmVCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19zYXZlUGZwLWJ1dHRvblwiKTtcbi8vc2VsZWN0cyB0aGUgZWRpdCBidXR0b24gaW4gcHJvZmlsZSBzZWN0aW9uXG5leHBvcnQgY29uc3QgcHJvZmlsZUVkaXRCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Byb2ZpbGUtZWRpdC1idXR0b25cIik7XG4vL3NlbGVjdCB0aGUgZm9ybSBmb3IgcGVyc29uXG5leHBvcnQgY29uc3QgZm9ybVBlcnNvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbW9kYWxfX2Zvcm0tcGVyc29uXCIpO1xuLy9zZWxlY3QgdGhlIGZvcm0gZm9yIGFkZGluZ1xuZXhwb3J0IGNvbnN0IGZvcm1JbWcgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI21vZGFsX19mb3JtLWltZ1wiKTtcbi8vc2VsZWN0cyBjaGFuZ2VQZnAgZm9ybVxuZXhwb3J0IGNvbnN0IGNoYW5nZVBmcEZvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2NoYW5nZVBmcC1tb2RhbFwiKTtcbi8vc2VsZWN0cyBhZGQgYnV0dG9uXG5leHBvcnQgY29uc3QgbW9kYWxBZGQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Byb2ZpbGUtYWRkLWJ1dHRvblwiKTtcbiIsIi8vaW1wb3J0IGpzIGFuZCBjc3MgZmlsZXNcblxuaW1wb3J0IEZvcm1WYWxpZGF0b3IgZnJvbSBcIi4uL2NvbXBvbmVudHMvRm9ybVZhbGlkYXRvci5qc1wiO1xuaW1wb3J0IENhcmQgZnJvbSBcIi4uL2NvbXBvbmVudHMvQ2FyZC5qc1wiO1xuaW1wb3J0IFNlY3Rpb24gZnJvbSBcIi4uL2NvbXBvbmVudHMvU2VjdGlvbi5qc1wiO1xuaW1wb3J0IE1vZGFsV2l0aEZvcm0gZnJvbSBcIi4uL2NvbXBvbmVudHMvTW9kYWxXaXRoRm9ybS5qc1wiO1xuaW1wb3J0IE1vZGFsV2l0aEltYWdlIGZyb20gXCIuLi9jb21wb25lbnRzL01vZGFsV2l0aEltYWdlLmpzXCI7XG5pbXBvcnQgTW9kYWxXaXRoQ29uZmlybSBmcm9tIFwiLi4vY29tcG9uZW50cy9Nb2RhbFdpdGhDb25maXJtLmpzXCI7XG5pbXBvcnQgQXBpIGZyb20gXCIuLi9jb21wb25lbnRzL0FwaS5qc1wiO1xuaW1wb3J0IFVzZXJJbmZvIGZyb20gXCIuLi9jb21wb25lbnRzL1VzZXJJbmZvLmpzXCI7XG5pbXBvcnQgXCIuLi9wYWdlcy9pbmRleC5jc3NcIjtcbmltcG9ydCB7XG4gIGlucHV0VGl0bGUsXG4gIGlucHV0U3ViVGl0bGUsXG4gIGlucHV0UGljdHVyZVVybCxcbiAgcHJvZmlsZUVkaXRCdXR0b24sXG4gIGZvcm1QZXJzb24sXG4gIGZvcm1JbWcsXG4gIGNoYW5nZVBmcEZvcm0sXG4gIG1vZGFsQWRkLFxuICBwcm9maWxlU2F2ZUJ1dHRvbixcbiAgY2FyZFNhdmVCdXR0b24sXG4gIHBmcFNhdmVCdXR0b24sXG59IGZyb20gXCIuLi91dGlscy9jb25zdGFudHMuanNcIjtcblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuQVBJIG9uIHRvcCB0byBhdm9pZCBzY29wZSBpc3N1ZXNcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5jb25zdCBuZXdBcGkgPSBuZXcgQXBpKHtcbiAgYmFzZVVybDogXCJodHRwczovL2Fyb3VuZC1hcGkuZW4udHJpcGxldGVuLXNlcnZpY2VzLmNvbS92MVwiLFxufSk7XG5cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbkZ1bmN0aW9uc1xuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuLy9tYWtlIHN1cmUgdG8gZGVmaW5lIHRoZSBmdW5jdGlvbnMvY29uc3RzIGJlZm9yZSB0cnlpbmcgdG8gY2FsbCB0aGVtLlxuXG4vL3ByZXZpZXcgcGhvdG9cbmNvbnN0IHByZXZpZXdNb2RhbCA9IG5ldyBNb2RhbFdpdGhJbWFnZShcIiNwaG90by1tb2RhbFwiKTtcbmNvbnN0IGhhbmRsZUltYWdlQ2xpY2sgPSAoZGF0YSkgPT4ge1xuICAvL3JldmVhbHMgbW9kYWxcbiAgcHJldmlld01vZGFsLm9wZW4oZGF0YSk7XG59O1xucHJldmlld01vZGFsLnNldEV2ZW50TGlzdGVuZXJzKCk7XG5cbi8vYWNjZXNzIHRoZSBncmlkIG9mIGNhcmRzXG5jb25zdCBjYXJkR2FsbGVyeVNlbGVjdG9yID0gXCIuZ2FsbGVyeV9fZ3JpZFwiO1xuLy9hY2Nlc3MgdGhlIGNhcmQgdGVtcGxhdGVcbmNvbnN0IGNhcmRTZWxlY3RvciA9IFwiI2NhcmQtdGVtcGxhdGVcIjtcblxubGV0IHBsYWNlID0gXCJhcHBlbmRcIjtcbmNvbnN0IGNhcmRIb2xkZXIgPSBbXTtcbi8vZnVuY3Rpb24gdG8gY3JlYXRlIGNhcmRcbmNvbnN0IGNyZWF0ZUNhcmQgPSAoaXRlbSkgPT4ge1xuICBjb25zdCBjYXJkID0gbmV3IENhcmQoe1xuICAgIGRhdGE6IGl0ZW0sXG4gICAgY2FyZFNlbGVjdG9yOiBjYXJkU2VsZWN0b3IsXG4gICAgaGFuZGxlSW1hZ2VDbGljazogaGFuZGxlSW1hZ2VDbGljayxcbiAgICBoYW5kbGVUcmFzaENsaWNrOiAoKSA9PiB7XG4gICAgICBjb25zdCBjYXJkSWQgPSBjYXJkLmdldElkKCk7XG4gICAgICBjb25maXJtTW9kYWwuc2V0QWN0aW9uKCgpID0+IGhhbmRsZURlbGV0ZUNvbmZpcm0oY2FyZCwgY2FyZElkKSk7XG4gICAgICBjb25maXJtTW9kYWwub3BlbigpO1xuICAgIH0sXG4gICAgdG9nZ2xlTGlrZTogKCkgPT4ge1xuICAgICAgY29uc3QgY2FyZElkID0gY2FyZC5nZXRJZCgpO1xuICAgICAgY29uc3QgaXNMaWtlZCA9IGNhcmQuaXNMaWtlZCgpO1xuICAgICAgLy9pZiBpdCBhbHJlYWR5IGlzIGxpa2VkXG4gICAgICBpZiAoaXNMaWtlZCkge1xuICAgICAgICBuZXdBcGlcbiAgICAgICAgICAucmVtb3ZlTGlrZSh7IGNhcmRJZDogY2FyZElkLCBpc0xpa2VkOiBpc0xpa2VkIH0pXG4gICAgICAgICAgLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICAgICAgY2FyZC5zZXRJc0xpa2VkKGZhbHNlKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBkaXNsaWtpbmc6ICR7Y2FyZElkfWApO1xuICAgICAgICAgICAgY29uc29sZS5sb2cocmVzKTtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IuIFRoZSByZXF1ZXN0IGhhcyBmYWlsZWQ6IFwiLCBlcnIpO1xuICAgICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgLy9pZiBpdCBpcyBub3QgbGlrZWQ6XG4gICAgICBlbHNlIHtcbiAgICAgICAgbmV3QXBpXG4gICAgICAgICAgLmFkZExpa2UoeyBjYXJkSWQ6IGNhcmRJZCwgaXNMaWtlZDogaXNMaWtlZCB9KVxuICAgICAgICAgIC50aGVuKChyZXMpID0+IHtcbiAgICAgICAgICAgIGNhcmQuc2V0SXNMaWtlZCh0cnVlKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBsaWtpbmc6ICR7Y2FyZElkfWApO1xuICAgICAgICAgICAgY29uc29sZS5sb2cocmVzKTtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IuIFRoZSByZXF1ZXN0IGhhcyBmYWlsZWQ6IFwiLCBlcnIpO1xuICAgICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sXG4gIH0pO1xuICBjb25zdCBjYXJkRWxlbWVudCA9IGNhcmQuZ2V0VmlldygpO1xuICBzZWN0aW9uLmFkZEl0ZW0oY2FyZEVsZW1lbnQsIHBsYWNlKTtcblxuICByZXR1cm4geyBjYXJkLCBjYXJkSWQ6IGNhcmQuZ2V0SWQoKSB9O1xufTtcbmNvbnN0IHNlY3Rpb24gPSBuZXcgU2VjdGlvbihcbiAgeyBpdGVtczogY2FyZEhvbGRlciwgcmVuZGVyZXI6IGNyZWF0ZUNhcmQgfSxcbiAgY2FyZEdhbGxlcnlTZWxlY3RvclxuKTtcblxuY29uc3QgaGFuZGxlRGVsZXRlQ29uZmlybSA9IChjdXJyZW50Q2FyZCwgY2FyZElkKSA9PiB7XG4gIG5ld0FwaVxuICAgIC5kZWxldGVDYXJkKHsgY2FyZElkOiBjYXJkSWQgfSlcbiAgICAudGhlbigocmVzKSA9PiB7XG4gICAgICBjb25zb2xlLmxvZyhyZXMsIGNhcmRJZCk7XG4gICAgICBjdXJyZW50Q2FyZC5yZW1vdmVDYXJkKCk7XG4gICAgICBjb25zb2xlLmxvZyhgZGVsZXRpbmc6ICR7Y2FyZElkfWApO1xuICAgICAgY29uZmlybU1vZGFsLmNsb3NlKCk7XG4gICAgfSlcbiAgICAuY2F0Y2goKGVycikgPT4ge1xuICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yLiBUaGUgcmVxdWVzdCBoYXMgZmFpbGVkOiBcIiwgZXJyKTtcbiAgICB9KTtcbn07XG5cbi8vQ29uZmlybWF0aW9uIGZvcm1cbmNvbnN0IGNvbmZpcm1Nb2RhbCA9IG5ldyBNb2RhbFdpdGhDb25maXJtKHtcbiAgbW9kYWxTZWxlY3RvcjogXCIjY29uZmlybS1tb2RhbFwiLFxufSk7XG5jb25maXJtTW9kYWwuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcblxuLy90aGUgQVBJJ3MgZGF0YSAocmVzcG9uc2UpIGlzIHRoZSBuZXcgXCJpbml0aWFsXCIgYXJyYXlcbm5ld0FwaVxuICAuZ2V0SW5pdGlhbENhcmRzKClcbiAgLnRoZW4oKGRhdGEpID0+IHtcbiAgICBjb25zdCBzZWN0aW9uID0gbmV3IFNlY3Rpb24oXG4gICAgICB7IGl0ZW1zOiBkYXRhLCByZW5kZXJlcjogY3JlYXRlQ2FyZCB9LFxuICAgICAgY2FyZEdhbGxlcnlTZWxlY3RvclxuICAgICk7XG4gICAgc2VjdGlvbi5yZW5kZXJJdGVtcygpO1xuICB9KVxuICAuY2F0Y2goKGVycikgPT4ge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvci4gVGhlIHJlcXVlc3QgaGFzIGZhaWxlZDogXCIsIGVycik7XG4gIH0pO1xuLy9tYWtlIGdsb2JhbCBpbnN0YW5jZSBvZiBVc2VyaW5mbyBjbGFzc1xuY29uc3QgdXNlckluZm8gPSBuZXcgVXNlckluZm8oe1xuICBwcm9maWxlTmFtZVNlbGVjdG9yOiBcIi5wcm9maWxlX190aXRsZVwiLFxuICBwcm9maWxlSm9iU2VsZWN0b3I6IFwiLnByb2ZpbGVfX3N1YnRpdGxlXCIsXG4gIHByb2ZpbGVQaWN0dXJlU2VsZWN0b3I6IFwiLnByb2ZpbGVfX3BpY3R1cmVcIixcbn0pO1xuXG4vL2Z1bmN0aW9uIHRvIHNhdmUgcGVyc29uLiB0aGlzIHRha2VzIGRhdGEgZnJvbSB0aGUgZm9ybSxcbi8vdGhlbiBsZXRzIHVzZXJpbmZvIHVzZSBpdFxuY29uc3QgaGFuZGxlUHJvZmlsZUZvcm1TdWJtaXQgPSAoaW5wdXREYXRhKSA9PiB7XG4gIGNvbnNvbGUubG9nKGlucHV0RGF0YSk7XG4gIC8vYWRkIHRoZSBpbmZvIHRvIHRoZSBwYWdlXG4gIGVkaXRQcm9maWxlTW9kYWwuc2hvd0xvYWRpbmcoKTtcbiAgbmV3QXBpXG4gICAgLmVkaXRQcm9maWxlKHsgbmFtZTogaW5wdXREYXRhLnRpdGxlLCBhYm91dDogaW5wdXREYXRhLnN1YnRpdGxlIH0pXG4gICAgLnRoZW4oKGRhdGEpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKGRhdGEpO1xuICAgICAgdXNlckluZm8uc2V0VXNlckluZm8oeyBuYW1lOiBpbnB1dERhdGEudGl0bGUsIGpvYjogaW5wdXREYXRhLnN1YnRpdGxlIH0pO1xuICAgICAgZWRpdFByb2ZpbGVNb2RhbC5jbG9zZSgpO1xuICAgIH0pXG4gICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvci4gVGhlIHJlcXVlc3QgaGFzIGZhaWxlZDogXCIsIGVycik7XG4gICAgfSlcbiAgICAuZmluYWxseSgoKSA9PiB7XG4gICAgICBlZGl0UHJvZmlsZU1vZGFsLmhpZGVMb2FkaW5nKCk7XG4gICAgfSk7XG59O1xuXG4vL2Z1bmN0aW9uIHRvIGNyZWF0ZSBuZXcgY2FyZCBpbWdcbmNvbnN0IGhhbmRsZUltZ0Zvcm1TdWJtaXQgPSAoaW5wdXREYXRhKSA9PiB7XG4gIG5ld0NhcmRNb2RhbC5zaG93TG9hZGluZygpO1xuICBjb25zb2xlLmxvZyhpbnB1dERhdGEpO1xuICAvL2NyZWF0ZSBuZXcgY2FyZFxuICBjb25zb2xlLmxvZyhpbnB1dERhdGEuaW1nVGl0bGUsIGlucHV0RGF0YS5pbWdVUkwpO1xuXG4gIG5ld0FwaVxuICAgIC5hZGROZXdDYXJkKHsgbmFtZTogaW5wdXREYXRhLmltZ1RpdGxlLCBsaW5rOiBpbnB1dERhdGEuaW1nVVJMIH0pXG4gICAgLnRoZW4oKGRhdGEpID0+IHtcbiAgICAgIGNvbnN0IG5ld0NhcmQgPSB7XG4gICAgICAgIG5hbWU6IGRhdGEubmFtZSxcbiAgICAgICAgbGluazogZGF0YS5saW5rLFxuICAgICAgICBhbHQ6IGRhdGEubmFtZSxcbiAgICAgICAgX2lkOiBkYXRhLl9pZCxcbiAgICAgIH07XG4gICAgICBwbGFjZSA9IFwicHJlcGVuZFwiO1xuICAgICAgY3JlYXRlQ2FyZChuZXdDYXJkKTtcbiAgICAgIG5ld0NhcmRNb2RhbC5jbG9zZSgpO1xuICAgIH0pXG4gICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvci4gVGhlIHJlcXVlc3QgaGFzIGZhaWxlZDogXCIsIGVycik7XG4gICAgfSlcbiAgICAuZmluYWxseSgoKSA9PiB7XG4gICAgICBuZXdDYXJkTW9kYWwuaGlkZUxvYWRpbmcoKTtcbiAgICB9KTtcbn07XG5cbi8qanVzdCB0cnkgdGhpcyB2YWxpZCBsaW5rIGZyb20gcHJhY3RpY3VtOlxuaHR0cHM6Ly9wcmFjdGljdW0tY29udGVudC5zMy51cy13ZXN0LTEuYW1hem9uYXdzLmNvbS9zb2Z0d2FyZS1lbmdpbmVlci9sb2dvLnN2Z1xuIHRvIGVudGVyIGludG8gdGhlIGlucHV0IHRvIHRlc3QgaXQgZm9yIGNvbnZlbmllbmNlLlxuICovXG5jb25zdCBoYW5kbGVQZnBGb3JtU3VibWl0ID0gKGlucHV0RGF0YSkgPT4ge1xuICBjaGFuZ2VQZnBNb2RhbC5zaG93TG9hZGluZygpO1xuICBuZXdBcGlcbiAgICAuY2hhbmdlUGZwKHsgYXZhdGFyOiBgJHtpbnB1dERhdGEucGZwVVJMfWAgfSlcbiAgICAudGhlbigocmVzKSA9PiB7XG4gICAgICBjb25zb2xlLmxvZyhyZXMpO1xuICAgICAgdXNlckluZm8uc2V0VXNlclBpY3R1cmUoeyBwaWN0dXJlOiBpbnB1dERhdGEucGZwVVJMIH0pO1xuICAgICAgY29uc29sZS5sb2coYGNoYW5nZWQgcGZwIHVybCB0bzogJHtpbnB1dERhdGEucGZwVVJMfSBgKTtcbiAgICAgIGNoYW5nZVBmcE1vZGFsLmNsb3NlKCk7XG4gICAgfSlcbiAgICAuY2F0Y2goKGVycikgPT4ge1xuICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yLiBUaGUgcmVxdWVzdCBoYXMgZmFpbGVkOiBcIiwgZXJyKTtcbiAgICB9KVxuICAgIC5maW5hbGx5KCgpID0+IHtcbiAgICAgIGNoYW5nZVBmcE1vZGFsLmhpZGVMb2FkaW5nKCk7XG4gICAgfSk7XG59O1xuLy9lZGl0IHByb2ZpbGUgcGVyc29uIGZvcm1cbmNvbnN0IGVkaXRQcm9maWxlTW9kYWwgPSBuZXcgTW9kYWxXaXRoRm9ybSh7XG4gIG1vZGFsU2VsZWN0b3I6IFwiI3Byb2ZpbGUtZWRpdC1tb2RhbFwiLFxuICBoYW5kbGVTdWJtaXRGb3JtOiBoYW5kbGVQcm9maWxlRm9ybVN1Ym1pdCxcbiAgbG9hZGluZ0J1dHRvblRleHQ6IFwiU2F2aW5nXCIsXG59KTtcbmNvbnN0IG9wZW5QZXJzb25Nb2RhbCA9ICgpID0+IHtcbiAgZWRpdFByb2ZpbGVNb2RhbC5vcGVuKCk7XG4gIHByb2ZpbGVTYXZlQnV0dG9uLnRleHRDb250ZW50ID0gXCJTYXZlXCI7XG4gIC8vbWFrZXMgY3VycmVudCB0ZXh0IHRoZSBpbnB1dCB0ZXh0IHdoZW4gb3BlbiB0aGUgbW9kYWxcbiAgY29uc3QgeyBuYW1lLCBqb2IgfSA9IHVzZXJJbmZvLmdldFVzZXJJbmZvKCk7XG4gIGlucHV0VGl0bGUudmFsdWUgPSBuYW1lO1xuICBpbnB1dFN1YlRpdGxlLnZhbHVlID0gam9iO1xufTtcbmNvbnN0IGNoYW5nZVBmcE1vZGFsID0gbmV3IE1vZGFsV2l0aEZvcm0oe1xuICBtb2RhbFNlbGVjdG9yOiBcIiNjaGFuZ2VQZnAtbW9kYWxcIixcbiAgaGFuZGxlU3VibWl0Rm9ybTogaGFuZGxlUGZwRm9ybVN1Ym1pdCxcbiAgbG9hZGluZ0J1dHRvblRleHQ6IFwiU2F2aW5nXCIsXG59KTtcbmNvbnN0IG9wZW5QZnBNb2RhbCA9ICgpID0+IHtcbiAgY2hhbmdlUGZwTW9kYWwub3BlbigpO1xuICBjb25zb2xlLmxvZyhwZnBTYXZlQnV0dG9uKTtcbiAgcGZwU2F2ZUJ1dHRvbi50ZXh0Q29udGVudCA9IFwiU2F2ZVwiO1xuICAvL21ha2VzIGN1cnJlbnQgdGV4dCB0aGUgaW5wdXQgdGV4dCB3aGVuIG9wZW4gdGhlIG1vZGFsXG4gIGNvbnN0IHsgcGljdHVyZSB9ID0gdXNlckluZm8uZ2V0VXNlckluZm8oKTtcbiAgaW5wdXRQaWN0dXJlVXJsLnZhbHVlID0gcGljdHVyZTtcbn07XG5jb25zdCBwZnBDaGFuZ2VCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnByb2ZpbGVfX3BpY3R1cmUtY29udGFpbmVyXCIpO1xucGZwQ2hhbmdlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBvcGVuUGZwTW9kYWwpO1xuY2hhbmdlUGZwTW9kYWwuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcblxuLy9jbGljayBlZGl0IGJ1dHRvbiB0byBvcGVuIHBlcnNvbiBtb2RhbFxucHJvZmlsZUVkaXRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIG9wZW5QZXJzb25Nb2RhbCk7XG5lZGl0UHJvZmlsZU1vZGFsLnNldEV2ZW50TGlzdGVuZXJzKCk7XG5cbi8vYWRkIGNhcmQgaW1hZ2UgZm9ybVxuY29uc3QgbmV3Q2FyZE1vZGFsID0gbmV3IE1vZGFsV2l0aEZvcm0oe1xuICBtb2RhbFNlbGVjdG9yOiBcIiNpbWctY3JlYXRlLW1vZGFsXCIsXG4gIGhhbmRsZVN1Ym1pdEZvcm06IGhhbmRsZUltZ0Zvcm1TdWJtaXQsXG4gIGxvYWRpbmdCdXR0b25UZXh0OiBcIlNhdmluZ1wiLFxufSk7XG5jb25zdCBvcGVuQ2FyZE1vZGFsID0gKCkgPT4ge1xuICBuZXdDYXJkTW9kYWwub3BlbigpO1xuICBjYXJkU2F2ZUJ1dHRvbi50ZXh0Q29udGVudCA9IFwiQ3JlYXRlXCI7XG59O1xuLy9jbGljayBhZGQgYnV0dG9uIHRvIG9wZW4gaW1nIG1vZGFsXG5tb2RhbEFkZC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgb3BlbkNhcmRNb2RhbCk7XG5uZXdDYXJkTW9kYWwuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcblxuLy9tb3ZlIHRoZSBjb25maWcgdmFyaWFibGUgaGVyZVxuY29uc3QgY29uZmlnID0ge1xuICBmb3JtU2VsZWN0b3I6IFwiLm1vZGFsX19mb3JtXCIsXG4gIGlucHV0U2VsZWN0b3I6IFwiLm1vZGFsX19pbnB1dFwiLFxuICBzdWJtaXRCdXR0b25TZWxlY3RvcjogXCIubW9kYWxfX3N1Ym1pdC1idXR0b25cIixcbiAgaW5hY3RpdmVCdXR0b25DbGFzczogXCJtb2RhbF9fc3VibWl0LWJ1dHRvbjpkaXNhYmxlZFwiLFxuICBpbnB1dEludmFsaWRDbGFzczogXCJtb2RhbF9faW5wdXRfaW52YWxpZFwiLFxuICBpbnB1dEVycm9yQ2xhc3M6IFwibW9kYWxfX2Vycm9yXCIsXG4gIGVycm9yQ2xhc3M6IFwibW9kYWxfX2Vycm9yX3Zpc2libGVcIixcbn07XG5cbi8vY2FsbCBhbmQgbWFrZSBhIG5ldyBmb3JtVmFsaWRhdG9yIHdpdGggdGhlIHNwZWNpZmljIHBhcmFtZXRlcnMgb2YgdGhlIHJlbGF0aXZlIG9iamVjdFxuZnVuY3Rpb24gaW5pdGlhbGl6ZUZvcm1WYWxpZGF0b3IoY29uZmlnLCBmb3JtKSB7XG4gIGNvbnN0IGZvcm1WYWxpZGF0b3IgPSBuZXcgRm9ybVZhbGlkYXRvcihjb25maWcsIGZvcm0pO1xuICBmb3JtVmFsaWRhdG9yLmVuYWJsZVZhbGlkYXRpb24oKTtcbiAgcmV0dXJuIGZvcm1WYWxpZGF0b3I7XG59XG5jb25zdCBlZGl0Rm9ybVZhbGlkYXRvciA9IGluaXRpYWxpemVGb3JtVmFsaWRhdG9yKGNvbmZpZywgZm9ybVBlcnNvbik7XG5jb25zdCBhZGRGb3JtVmFsaWRhdG9yID0gaW5pdGlhbGl6ZUZvcm1WYWxpZGF0b3IoY29uZmlnLCBmb3JtSW1nKTtcbmNvbnN0IGNoYW5nZVBmcEZvcm1WYWxpZGF0b3IgPSBpbml0aWFsaXplRm9ybVZhbGlkYXRvcihjb25maWcsIGNoYW5nZVBmcEZvcm0pO1xuIiwiY2xhc3MgQXBpIHtcbiAgY29uc3RydWN0b3IoeyBiYXNlVXJsIH0pIHtcbiAgICB0aGlzLl9iYXNlVXJsID0gYmFzZVVybDtcbiAgICB0aGlzLl9oZWFkZXJzID0ge1xuICAgICAgYXV0aG9yaXphdGlvbjogXCI2ZDdhZTllYi04ODY5LTQxMGYtYjM1Yy04ZTFkY2M0NGYwNGJcIixcbiAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgIH07XG4gIH1cblxuICAvL0Z1bmN0aW9uIHRvIHByb2Nlc3MgcmVzcG9uc2UuIFJldXNlIGl0IGZvciBlYWNoIGZldGNoLlxuICBfcHJvY2Vzc1Jlc3BvbnNlID0gKHJlcykgPT4ge1xuICAgIGlmIChyZXMub2spIHtcbiAgICAgIHJldHVybiByZXMuanNvbigpO1xuICAgIH1cbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoYEVycm9yOiAke3Jlcy5zdGF0dXN9YCk7XG4gIH07XG5cbiAgLy9HRVQgaHR0cHM6Ly9hcm91bmQtYXBpLmVuLnRyaXBsZXRlbi1zZXJ2aWNlcy5jb20vdjEvY2FyZHNcbiAgZ2V0SW5pdGlhbENhcmRzKCkge1xuICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9iYXNlVXJsfS9jYXJkc2AsIHtcbiAgICAgIG1ldGhvZDogXCJHRVRcIixcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXG4gICAgfSkudGhlbih0aGlzLl9wcm9jZXNzUmVzcG9uc2UpO1xuICB9XG5cbiAgLy9QQVRDSCBodHRwczovL2Fyb3VuZC1hcGkuZW4udHJpcGxldGVuLXNlcnZpY2VzLmNvbS92MS91c2Vycy9tZVxuICBlZGl0UHJvZmlsZSh7IG5hbWUsIGFib3V0IH0pIHtcbiAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vdXNlcnMvbWVgLCB7XG4gICAgICBtZXRob2Q6IFwiUEFUQ0hcIixcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIG5hbWUsXG4gICAgICAgIGFib3V0LFxuICAgICAgfSksXG4gICAgfSkudGhlbih0aGlzLl9wcm9jZXNzUmVzcG9uc2UpO1xuICB9XG4gIC8vUEFUQ0ggaHR0cHM6Ly9hcm91bmQtYXBpLmVuLnRyaXBsZXRlbi1zZXJ2aWNlcy5jb20vdjEvdXNlcnMvbWUvYXZhdGFyXG4gIGNoYW5nZVBmcCh7IGF2YXRhciB9KSB7XG4gICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L3VzZXJzL21lL2F2YXRhcmAsIHtcbiAgICAgIG1ldGhvZDogXCJQQVRDSFwiLFxuICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgYXZhdGFyLFxuICAgICAgfSksXG4gICAgfSkudGhlbih0aGlzLl9wcm9jZXNzUmVzcG9uc2UpO1xuICB9XG4gIC8vUE9TVCBodHRwczovL2Fyb3VuZC1hcGkuZW4udHJpcGxldGVuLXNlcnZpY2VzLmNvbS92MS9jYXJkc1xuICBhZGROZXdDYXJkKHsgbmFtZSwgbGluayB9KSB7XG4gICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L2NhcmRzYCwge1xuICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIG5hbWUsXG4gICAgICAgIGxpbmssXG4gICAgICB9KSxcbiAgICB9KS50aGVuKHRoaXMuX3Byb2Nlc3NSZXNwb25zZSk7XG4gIH1cbiAgLy9ERUxFVEUgaHR0cHM6Ly9hcm91bmQtYXBpLmVuLnRyaXBsZXRlbi1zZXJ2aWNlcy5jb20vdjEvY2FyZHMvY2FyZElkXG4gIGRlbGV0ZUNhcmQoeyBjYXJkSWQgfSkge1xuICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9iYXNlVXJsfS9jYXJkcy8ke2NhcmRJZH1gLCB7XG4gICAgICBtZXRob2Q6IFwiREVMRVRFXCIsXG4gICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxuICAgIH0pLnRoZW4odGhpcy5fcHJvY2Vzc1Jlc3BvbnNlKTtcbiAgfVxuICAvL1BVVCBodHRwczovL2Fyb3VuZC1hcGkuZW4udHJpcGxldGVuLXNlcnZpY2VzLmNvbS92MS9jYXJkcy9jYXJkSWQvbGlrZXNcbiAgYWRkTGlrZSh7IGNhcmRJZCwgaXNMaWtlZCB9KSB7XG4gICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L2NhcmRzLyR7Y2FyZElkfS9saWtlc2AsIHtcbiAgICAgIG1ldGhvZDogXCJQVVRcIixcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIGlzTGlrZWQsXG4gICAgICB9KSxcbiAgICB9KS50aGVuKHRoaXMuX3Byb2Nlc3NSZXNwb25zZSk7XG4gIH1cbiAgLy9QVVQgaHR0cHM6Ly9hcm91bmQtYXBpLmVuLnRyaXBsZXRlbi1zZXJ2aWNlcy5jb20vdjEvY2FyZHMvY2FyZElkL2xpa2VzXG4gIHJlbW92ZUxpa2UoeyBjYXJkSWQgfSkge1xuICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9iYXNlVXJsfS9jYXJkcy8ke2NhcmRJZH0vbGlrZXNgLCB7XG4gICAgICBtZXRob2Q6IFwiREVMRVRFXCIsXG4gICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxuICAgIH0pLnRoZW4odGhpcy5fcHJvY2Vzc1Jlc3BvbnNlKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBBcGk7XG4iLCJpbXBvcnQgTW9kYWwgZnJvbSBcIi4vTW9kYWwuanNcIjtcblxuY2xhc3MgTW9kYWxXaXRoSW1hZ2UgZXh0ZW5kcyBNb2RhbCB7XG4gIGNvbnN0cnVjdG9yKG1vZGFsU2VsZWN0b3IpIHtcbiAgICBzdXBlcihtb2RhbFNlbGVjdG9yKTtcbiAgICB0aGlzLl9ib3hQaG90byA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWxfX2JveC1waG90b1wiKTtcbiAgICB0aGlzLl9ib3hUaXRsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWxfX2JveC10aXRsZVwiKTtcbiAgfVxuICBvcGVuKGRhdGEpIHtcbiAgICB0aGlzLl9ib3hQaG90by5zcmMgPSBkYXRhLmxpbms7XG4gICAgdGhpcy5fYm94UGhvdG8uYWx0ID0gZGF0YS5uYW1lO1xuICAgIHRoaXMuX2JveFRpdGxlLnRleHRDb250ZW50ID0gZGF0YS5uYW1lO1xuICAgIHN1cGVyLm9wZW4oKTtcbiAgfVxuXG4gIHNldEV2ZW50TGlzdGVuZXJzKCkge1xuICAgIHN1cGVyLnNldEV2ZW50TGlzdGVuZXJzKCk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTW9kYWxXaXRoSW1hZ2U7XG4iLCJpbXBvcnQgTW9kYWwgZnJvbSBcIi4vTW9kYWwuanNcIjtcblxuY2xhc3MgTW9kYWxXaXRoQ29uZmlybSBleHRlbmRzIE1vZGFsIHtcbiAgY29uc3RydWN0b3IoeyBtb2RhbFNlbGVjdG9yIH0pIHtcbiAgICAvL1xuICAgIHN1cGVyKG1vZGFsU2VsZWN0b3IpO1xuICAgIHRoaXMuX21vZGFsU2VsZWN0b3IgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKG1vZGFsU2VsZWN0b3IpO1xuICAgIHRoaXMuX21vZGFsRm9ybSA9IHRoaXMuX21vZGFsU2VsZWN0b3IucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9fZm9ybVwiKTtcbiAgfVxuXG4gIC8vTWFrZSBpdCBnZW5lcmFsaXplZC4gVGhlIGFjdGlvbi9pbmZvIGNhbiBiZSBzcGVjaWZpZWQgZWxzZXdoZXJlIHdoZW4gbmVlZGVkLlxuICBzZXRBY3Rpb24oYWN0aW9uKSB7XG4gICAgdGhpcy5faGFuZGxlRm9ybVN1Ym1pdCA9IGFjdGlvbjtcbiAgfVxuXG4gIGNsb3NlKCkge1xuICAgIHN1cGVyLmNsb3NlKCk7XG4gIH1cblxuICBzZXRFdmVudExpc3RlbmVycygpIHtcbiAgICB0aGlzLl9tb2RhbEZvcm0uYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCAoZXZ0KSA9PiB7XG4gICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGlmICh0aGlzLl9oYW5kbGVGb3JtU3VibWl0KSB7XG4gICAgICAgIHRoaXMuX2hhbmRsZUZvcm1TdWJtaXQoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBzdXBlci5zZXRFdmVudExpc3RlbmVycygpO1xuICB9XG59XG5leHBvcnQgZGVmYXVsdCBNb2RhbFdpdGhDb25maXJtO1xuIiwiY2xhc3MgVXNlckluZm8ge1xuICBjb25zdHJ1Y3Rvcih7XG4gICAgcHJvZmlsZU5hbWVTZWxlY3RvcixcbiAgICBwcm9maWxlSm9iU2VsZWN0b3IsXG4gICAgcHJvZmlsZVBpY3R1cmVTZWxlY3RvcixcbiAgfSkge1xuICAgIHRoaXMuX3Byb2ZpbGVOYW1lID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihwcm9maWxlTmFtZVNlbGVjdG9yKTtcbiAgICB0aGlzLl9wcm9maWxlSm9iID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihwcm9maWxlSm9iU2VsZWN0b3IpO1xuICAgIHRoaXMuX3Byb2ZpbGVQaWN0dXJlID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihwcm9maWxlUGljdHVyZVNlbGVjdG9yKTtcbiAgfVxuXG4gIGdldFVzZXJJbmZvKCkge1xuICAgIC8vbWFrZSBhbiBvYmplY3QgdG8gY29udGFpbiBuYW1lIGFuZCBqb2IgaW5mb1xuICAgIGNvbnN0IGluZm8gPSB7XG4gICAgICBuYW1lOiBcIlwiLFxuICAgICAgam9iOiBcIlwiLFxuICAgICAgcGljdHVyZTogXCJcIixcbiAgICB9O1xuICAgIGluZm8ubmFtZSA9IHRoaXMuX3Byb2ZpbGVOYW1lLnRleHRDb250ZW50O1xuICAgIGluZm8uam9iID0gdGhpcy5fcHJvZmlsZUpvYi50ZXh0Q29udGVudDtcbiAgICBpbmZvLnBpY3R1cmUgPSB0aGlzLl9wcm9maWxlUGljdHVyZS5zcmM7XG4gICAgcmV0dXJuIGluZm87XG4gIH1cblxuICBzZXRVc2VySW5mbyh7IG5hbWUsIGpvYiB9KSB7XG4gICAgLy9hZGQgdGhlIGluZm8gdG8gdGhlIHBhZ2VcbiAgICB0aGlzLl9wcm9maWxlTmFtZS50ZXh0Q29udGVudCA9IG5hbWU7XG4gICAgdGhpcy5fcHJvZmlsZUpvYi50ZXh0Q29udGVudCA9IGpvYjtcbiAgfVxuICBzZXRVc2VyUGljdHVyZSh7IHBpY3R1cmUgfSkge1xuICAgIHRoaXMuX3Byb2ZpbGVQaWN0dXJlLnNyYyA9IHBpY3R1cmU7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgVXNlckluZm87XG4iXSwibmFtZXMiOlsiY29uc3RydWN0b3IiLCJjb25maWciLCJmb3JtRWxlbWVudCIsInRoaXMiLCJfaW5wdXRTZWxlY3RvciIsImlucHV0U2VsZWN0b3IiLCJfc3VibWl0QnV0dG9uU2VsZWN0b3IiLCJzdWJtaXRCdXR0b25TZWxlY3RvciIsIl9pbmFjdGl2ZUJ1dHRvbkNsYXNzIiwiaW5hY3RpdmVCdXR0b25DbGFzcyIsIl9pbnB1dEludmFsaWRDbGFzcyIsImlucHV0SW52YWxpZENsYXNzIiwiX2lucHV0RXJyb3JDbGFzcyIsImlucHV0RXJyb3JDbGFzcyIsIl9lcnJvckNsYXNzIiwiZXJyb3JDbGFzcyIsIl9mb3JtIiwiZGlzYWJsZUJ1dHRvbiIsImJ1dHRvbiIsImRpc2FibGVkIiwiZW5hYmxlQnV0dG9uIiwiX3Nob3dJbnB1dEVycm9yIiwiaW5wdXRFbGVtZW50IiwiZXJyb3JNZXNzYWdlRWxlbWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJpZCIsInRleHRDb250ZW50IiwidmFsaWRhdGlvbk1lc3NhZ2UiLCJjbGFzc0xpc3QiLCJhZGQiLCJfaGlkZUlucHV0RXJyb3IiLCJyZW1vdmUiLCJjaGVja0lucHV0VmFsaWRpdHkiLCJvcHRpb25zIiwidmFsaWRpdHkiLCJ2YWxpZCIsIl9jaGVja0Zvcm1WYWxpZGl0eSIsImlucHV0RWxlbWVudHMiLCJldmVyeSIsImlucHV0IiwiX3RvZ2dsZUJ1dHRvbkFiaWxpdHkiLCJzdWJtaXRCdXR0b24iLCJfc2V0RXZlbnRMaXN0ZW5lcnMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9yRWFjaCIsImFkZEV2ZW50TGlzdGVuZXIiLCJldnQiLCJlbmFibGVWYWxpZGF0aW9uIiwicHJldmVudERlZmF1bHQiLCJfcmVmIiwiZGF0YSIsImNhcmRTZWxlY3RvciIsImhhbmRsZUltYWdlQ2xpY2siLCJoYW5kbGVUcmFzaENsaWNrIiwiaGFuZGxlRGVsZXRlQ29uZmlybSIsInRvZ2dsZUxpa2UiLCJuYW1lIiwibGluayIsImFsdCIsIl9pZCIsIl9jYXJkU2VsZWN0b3IiLCJfaGFuZGxlSW1hZ2VDbGljayIsIl9oYW5kbGVUcmFzaENsaWNrIiwiX2hhbmRsZURlbGV0ZUNvbmZpcm0iLCJfdG9nZ2xlTGlrZSIsIl9pc0xpa2VkIiwiaXNMaWtlZCIsImdldElkIiwicmVtb3ZlQ2FyZCIsIl9lbGVtZW50IiwiX2dldFRlbXBsYXRlIiwiZG9jdW1lbnQiLCJjb250ZW50IiwiY2xvbmVOb2RlIiwic2V0SXNMaWtlZCIsIl9yZW5kZXJMaWtlcyIsIl9saWtlQnV0dG9uIiwiX3RyYXNoQnV0dG9uIiwiX2NhcmRQaG90byIsImdldFZpZXciLCJfY2FyZExhYmVsIiwic3JjIiwiY29udGFpbmVyU2VsZWN0b3IiLCJpdGVtcyIsInJlbmRlcmVyIiwiX2l0ZW1zIiwiX3JlbmRlcmVyIiwiX2NvbnRhaW5lciIsInJlbmRlckl0ZW1zIiwiaXRlbSIsImFkZEl0ZW0iLCJwbGFjZSIsImFyZ3VtZW50cyIsImxlbmd0aCIsInVuZGVmaW5lZCIsImFwcGVuZCIsInByZXBlbmQiLCJtb2RhbFNlbGVjdG9yIiwib3BlbiIsIl9oYW5kbGVFc2NDbG9zZSIsImNsb3NlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImtleSIsInNldEV2ZW50TGlzdGVuZXJzIiwiY3VycmVudENsb3NlQnV0dG9uIiwiYmluZCIsIm1vZGFsQ29udGFpbmVyIiwic3RvcFByb3BhZ2F0aW9uIiwiaXNJbnNpZGVDb250YWluZXIiLCJ0YXJnZXQiLCJjb250YWlucyIsIk1vZGFsIiwiaGFuZGxlU3VibWl0Rm9ybSIsImxvYWRpbmdCdXR0b25UZXh0Iiwic3VwZXIiLCJfbW9kYWxTZWxlY3RvciIsIl9tb2RhbEZvcm0iLCJfc3VibWl0QnV0dG9uIiwiX2J1dHRvblRleHQiLCJfbG9hZGluZ0J1dHRvblRleHQiLCJfaGFuZGxlU3VibWl0Rm9ybSIsInNob3dMb2FkaW5nIiwiaGlkZUxvYWRpbmciLCJyZXNldCIsIl9nZXRJbnB1dFZhbHVlcyIsImlucHV0TGlzdCIsImlucHV0VmFsdWVzIiwidmFsdWUiLCJpbnB1dFRpdGxlIiwiaW5wdXRTdWJUaXRsZSIsImlucHV0UGljdHVyZVVybCIsInByb2ZpbGVTYXZlQnV0dG9uIiwiY2FyZFNhdmVCdXR0b24iLCJwZnBTYXZlQnV0dG9uIiwicHJvZmlsZUVkaXRCdXR0b24iLCJmb3JtUGVyc29uIiwiZm9ybUltZyIsImNoYW5nZVBmcEZvcm0iLCJtb2RhbEFkZCIsIm5ld0FwaSIsImJhc2VVcmwiLCJfYmFzZVVybCIsIl9oZWFkZXJzIiwiYXV0aG9yaXphdGlvbiIsIl9wcm9jZXNzUmVzcG9uc2UiLCJyZXMiLCJvayIsImpzb24iLCJQcm9taXNlIiwicmVqZWN0Iiwic3RhdHVzIiwiZ2V0SW5pdGlhbENhcmRzIiwiZmV0Y2giLCJtZXRob2QiLCJoZWFkZXJzIiwidGhlbiIsImVkaXRQcm9maWxlIiwiX3JlZjIiLCJhYm91dCIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwiY2hhbmdlUGZwIiwiX3JlZjMiLCJhdmF0YXIiLCJhZGROZXdDYXJkIiwiX3JlZjQiLCJkZWxldGVDYXJkIiwiX3JlZjUiLCJjYXJkSWQiLCJhZGRMaWtlIiwiX3JlZjYiLCJyZW1vdmVMaWtlIiwiX3JlZjciLCJwcmV2aWV3TW9kYWwiLCJfYm94UGhvdG8iLCJfYm94VGl0bGUiLCJjYXJkR2FsbGVyeVNlbGVjdG9yIiwiY3JlYXRlQ2FyZCIsImNhcmQiLCJDYXJkIiwiY29uZmlybU1vZGFsIiwic2V0QWN0aW9uIiwiY29uc29sZSIsImxvZyIsImNhdGNoIiwiZXJyIiwiZXJyb3IiLCJjYXJkRWxlbWVudCIsInNlY3Rpb24iLCJTZWN0aW9uIiwiY3VycmVudENhcmQiLCJhY3Rpb24iLCJfaGFuZGxlRm9ybVN1Ym1pdCIsInVzZXJJbmZvIiwicHJvZmlsZU5hbWVTZWxlY3RvciIsInByb2ZpbGVKb2JTZWxlY3RvciIsInByb2ZpbGVQaWN0dXJlU2VsZWN0b3IiLCJfcHJvZmlsZU5hbWUiLCJfcHJvZmlsZUpvYiIsIl9wcm9maWxlUGljdHVyZSIsImdldFVzZXJJbmZvIiwiaW5mbyIsImpvYiIsInBpY3R1cmUiLCJzZXRVc2VySW5mbyIsInNldFVzZXJQaWN0dXJlIiwiZWRpdFByb2ZpbGVNb2RhbCIsIk1vZGFsV2l0aEZvcm0iLCJpbnB1dERhdGEiLCJ0aXRsZSIsInN1YnRpdGxlIiwiZmluYWxseSIsImNoYW5nZVBmcE1vZGFsIiwicGZwVVJMIiwib3BlblBmcE1vZGFsIiwib3BlblBlcnNvbk1vZGFsIiwibmV3Q2FyZE1vZGFsIiwiaW1nVGl0bGUiLCJpbWdVUkwiLCJuZXdDYXJkIiwib3BlbkNhcmRNb2RhbCIsImZvcm1TZWxlY3RvciIsImluaXRpYWxpemVGb3JtVmFsaWRhdG9yIiwiZm9ybSIsImZvcm1WYWxpZGF0b3IiLCJGb3JtVmFsaWRhdG9yIl0sInNvdXJjZVJvb3QiOiIifQ==