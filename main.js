!function(){"use strict";var e=class{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputInvalidClass=e.inputInvalidClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._form=t}disableButton(e){e.disabled=!0}enableButton(e){e.disabled=!1}_showInputError(e){const t=this._form.querySelector(`#${e.id}-error`);t.textContent=e.validationMessage,t.classList.add(this._errorClass),e.classList.add(this._inputInvalidClass)}_hideInputError(e){this._form.querySelector(`#${e.id}-error`).classList.remove(this._errorClass),e.classList.remove(this._inputInvalidClass)}checkInputValidity(e,t){e.validity.valid?this._hideInputError(e,t):this._showInputError(e,t)}_checkFormValidity=()=>this.inputElements.every((e=>e.validity.valid));_toggleButtonAbility=()=>{this._checkFormValidity()?this.enableButton(this.submitButton):this.disableButton(this.submitButton)};_setEventListeners(){this.inputElements=[...this._form.querySelectorAll(this._inputSelector)],this.submitButton=this._form.querySelector(this._submitButtonSelector),this.inputElements.forEach((e=>{e.addEventListener("input",(t=>{this.checkInputValidity(e),this._toggleButtonAbility(this.inputElements)}))}))}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault(),this.disableButton(this.submitButton)})),this._setEventListeners()}},t=class{constructor(e){let{data:t,cardSelector:s,handleImageClick:o,handleTrashClick:r,handleDeleteConfirm:i,toggleLike:n}=e;this.name=t.name,this.link=t.link,this.alt=t.alt,this._id=t._id,this._cardSelector=s,this._handleImageClick=o,this._handleTrashClick=r,this._handleDeleteConfirm=i,this._toggleLike=n,this._isLiked=t.isLiked||!1}getId(){return this._id}removeCard(){this._element.remove()}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".gallery__card").cloneNode(!0)}setIsLiked(e){this._isLiked=e,this._renderLikes()}isLiked(){return this._isLiked}_renderLikes(){this._isLiked?this._likeButton.classList.add("gallery__like-button_clicked"):this._likeButton.classList.remove("gallery__like-button_clicked")}_setEventListeners(){this._likeButton.addEventListener("click",(()=>this._toggleLike())),this._trashButton.addEventListener("click",(()=>this._handleTrashClick())),this._cardPhoto.addEventListener("click",(()=>{this._handleImageClick({name:this.name,link:this.link})}))}getView(){return this._element=this._getTemplate(),this._cardPhoto=this._element.querySelector(".gallery__image"),this._likeButton=this._element.querySelector(".gallery__like-button"),this._trashButton=this._element.querySelector(".gallery__delete-button"),this._cardLabel=this._element.querySelector(".gallery__label"),this._cardPhoto.src=this.link,this._cardPhoto.alt=this.name,this._cardLabel.textContent=this.name,this._renderLikes(),this._setEventListeners(),this._element}},s=class{constructor(e,t){let{items:s,renderer:o}=e;this._items=s,this._renderer=o,this._container=document.querySelector(t)}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}addItem(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"append";"append"===t&&this._container.append(e),"prepend"===t&&this._container.prepend(e)}},o=class{constructor(e){this.modalSelector=document.querySelector(e)}open(){this.modalSelector.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this.modalSelector.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose=e=>{"Escape"===e.key&&this.close()};setEventListeners(){this.currentCloseButton=this.modalSelector.querySelector(".modal__close"),this.currentCloseButton.addEventListener("click",this.close.bind(this)),this.modalContainer=this.modalSelector.querySelector(".modal__container"),this.modalSelector.addEventListener("mousedown",(e=>{e.stopPropagation();let t=!1;(e.target===this.modalContainer||this.modalContainer.contains(e.target))&&(t=!0),!1===t&&this.close()}))}},r=class extends o{constructor(e){let{modalSelector:t,handleSubmitForm:s,loadingButtonText:o}=e;super(t),this._modalSelector=document.querySelector(t),this._modalForm=this._modalSelector.querySelector(".modal__form"),this._submitButton=this._modalForm.querySelector(".modal__submit-button"),this._buttonText=this._submitButton.textContent,this._loadingButtonText=o,this._handleSubmitForm=s}showLoading(){this._submitButton.textContent=this._loadingButtonText}hideLoading(){this._submitButton.textContent=this._buttonText}close(){this._modalForm.reset(),super.close()}_getInputValues(){const e=[...this._modalSelector.querySelectorAll(".modal__input")],t={};for(const s of e)t[s.name]=s.value;return t}setEventListeners(){this._modalForm.addEventListener("submit",(e=>{e.preventDefault(),this.data=this._getInputValues(),this._handleSubmitForm(this.data)})),super.setEventListeners()}};document.querySelector(".profile__title"),document.querySelector(".profile__subtitle");const i=document.querySelector("#title"),n=document.querySelector("#subtitle"),l=document.querySelector("#pfp-URL"),a=document.querySelector(".modal__save-button"),d=document.querySelector(".modal__create-button"),c=document.querySelector(".modal__savePfp-button"),h=document.querySelector("#profile-edit-button"),u=document.querySelector("#modal__form-person"),m=document.querySelector("#modal__form-img"),_=document.querySelector("#changePfp-modal"),p=document.querySelector("#profile-add-button"),b=new class{constructor(e){let{baseUrl:t}=e;this._baseUrl=t,this._headers={authorization:"6d7ae9eb-8869-410f-b35c-8e1dcc44f04b","Content-Type":"application/json"}}_processResponse=e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`);getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{headers:this._headers}).then(this._processResponse)}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{method:"GET",headers:this._headers}).then(this._processResponse)}editProfile(e){let{name:t,about:s}=e;return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:t,about:s})}).then(this._processResponse)}changePfp(e){let{avatar:t}=e;return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:t})}).then(this._processResponse)}addNewCard(e){let{name:t,link:s}=e;return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:t,link:s})}).then(this._processResponse)}deleteCard(e){let{cardId:t}=e;return fetch(`${this._baseUrl}/cards/${t}`,{method:"DELETE",headers:this._headers}).then(this._processResponse)}addLike(e){let{cardId:t,isLiked:s}=e;return fetch(`${this._baseUrl}/cards/${t}/likes`,{method:"PUT",headers:this._headers,body:JSON.stringify({isLiked:s})}).then(this._processResponse)}removeLike(e){let{cardId:t}=e;return fetch(`${this._baseUrl}/cards/${t}/likes`,{method:"DELETE",headers:this._headers}).then(this._processResponse)}}({baseUrl:"https://around-api.en.tripleten-services.com/v1"}),g=new class{constructor(e,t){let{profileNameSelector:s,profileJobSelector:o,profilePictureSelector:r}=e;this._profileName=document.querySelector(s),this._profileJob=document.querySelector(o),this._profilePicture=document.querySelector(r)}getUserInfo(){const e={name:"",job:"",picture:""};return e.name=this._profileName.textContent,e.job=this._profileJob.textContent,e.picture=this._profilePicture.src,e}setUserInfo(e){let{name:t,job:s,picture:o}=e;t&&(this._profileName.textContent=t),s&&(this._profileJob.textContent=s),o&&(this._profilePicture.src=o)}setUserPicture(e){let{picture:t}=e;this.setUserInfo({picture:t})}}({profileNameSelector:".profile__title",profileJobSelector:".profile__subtitle",profilePictureSelector:".profile__picture"});b.getUserInfo().then((e=>{console.log(e),g.setUserInfo({name:e.name,job:e.about,picture:e.avatar})})).catch((e=>{console.error("Error fetching user info: ",e)}));const f=new class extends o{constructor(e){super(e),this._boxPhoto=document.querySelector(".modal__box-photo"),this._boxTitle=document.querySelector(".modal__box-title")}open(e){this._boxPhoto.src=e.link,this._boxPhoto.alt=e.name,this._boxTitle.textContent=e.name,super.open()}setEventListeners(){super.setEventListeners()}}("#photo-modal"),S=e=>{f.open(e)};f.setEventListeners();const L=".gallery__grid";let v="append";const y=e=>{const s=new t({data:e,cardSelector:"#card-template",handleImageClick:S,handleTrashClick:()=>{const e=s.getId();C.setAction((()=>E(s,e))),C.open()},toggleLike:()=>{const e=s.getId(),t=s.isLiked();t?b.removeLike({cardId:e,isLiked:t}).then((t=>{s.setIsLiked(!1),console.log(`disliking: ${e}`),console.log(t)})).catch((e=>{console.error("Error. The request has failed: ",e)})):b.addLike({cardId:e,isLiked:t}).then((t=>{s.setIsLiked(!0),console.log(`liking: ${e}`),console.log(t)})).catch((e=>{console.error("Error. The request has failed: ",e)}))}}),o=s.getView();return k.addItem(o,v),{card:s,cardId:s.getId()}},k=new s({items:[],renderer:y},L),E=(e,t)=>{C.showLoading(),b.deleteCard({cardId:t}).then((s=>{console.log(s,t),e.removeCard(),console.log(`deleting: ${t}`),C.close()})).catch((e=>{console.error("Error. The request has failed: ",e)})).finally((()=>{C.hideLoading()}))},C=new class extends o{constructor(e){let{modalSelector:t,loadingButtonText:s}=e;super(t),this._modalSelector=document.querySelector(t),this._modalForm=this._modalSelector.querySelector(".modal__form"),this._submitButton=this._modalForm.querySelector(".modal__submit-button"),this._buttonText=this._submitButton.textContent,this._loadingButtonText=s}setAction(e){this._handleFormSubmit=e}showLoading(){this._submitButton.textContent=this._loadingButtonText}hideLoading(){this._submitButton.textContent=this._buttonText}close(){super.close()}setEventListeners(){this._modalForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit&&this._handleFormSubmit()})),super.setEventListeners()}}({modalSelector:"#confirm-modal",loadingButtonText:"Saving"});C.setEventListeners(),b.getInitialCards().then((e=>{new s({items:e,renderer:y},L).renderItems()})).catch((e=>{console.error("Error. The request has failed: ",e)}));const q=new r({modalSelector:"#profile-edit-modal",handleSubmitForm:e=>{console.log(e),q.showLoading(),b.editProfile({name:e.title,about:e.subtitle}).then((t=>{console.log(t),g.setUserInfo({name:e.title,job:e.subtitle}),q.close()})).catch((e=>{console.error("Error. The request has failed: ",e)})).finally((()=>{q.hideLoading()}))},loadingButtonText:"Saving"}),I=new r({modalSelector:"#changePfp-modal",handleSubmitForm:e=>{I.showLoading(),b.changePfp({avatar:`${e.pfpURL}`}).then((t=>{console.log(t),g.setUserPicture({picture:e.pfpURL}),console.log(`changed pfp url to: ${e.pfpURL} `),I.close()})).catch((e=>{console.error("Error. The request has failed: ",e)})).finally((()=>{I.hideLoading()}))},loadingButtonText:"Saving"});document.querySelector(".profile__picture-container").addEventListener("click",(()=>{I.open(),console.log(c),c.textContent="Save";const{picture:e}=g.getUserInfo();l.value=e})),I.setEventListeners(),h.addEventListener("click",(()=>{q.open(),a.textContent="Save";const{name:e,job:t}=g.getUserInfo();i.value=e,n.value=t})),q.setEventListeners();const B=new r({modalSelector:"#img-create-modal",handleSubmitForm:e=>{B.showLoading(),console.log(e),console.log(e.imgTitle,e.imgURL),b.addNewCard({name:e.imgTitle,link:e.imgURL}).then((e=>{const t={name:e.name,link:e.link,alt:e.name,_id:e._id};v="prepend",y(t),B.close()})).catch((e=>{console.error("Error. The request has failed: ",e)})).finally((()=>{B.hideLoading()}))},loadingButtonText:"Saving"});p.addEventListener("click",(()=>{B.open(),d.textContent="Create"})),B.setEventListeners();const x={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__submit-button",inactiveButtonClass:"modal__submit-button:disabled",inputInvalidClass:"modal__input_invalid",inputErrorClass:"modal__error",errorClass:"modal__error_visible"};function T(t,s){const o=new e(t,s);return o.enableValidation(),o}T(x,u),T(x,m),T(x,_)}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,