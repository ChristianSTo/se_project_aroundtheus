!function(){"use strict";var e=class{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputInvalidClass=e.inputInvalidClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._form=t}disableButton(e){e.disabled=!0}enableButton(e){e.disabled=!1}_showInputError(e){const t=this._form.querySelector(`#${e.id}-error`);t.textContent=e.validationMessage,t.classList.add(this._errorClass),e.classList.add(this._inputInvalidClass)}_hideInputError(e){this._form.querySelector(`#${e.id}-error`).classList.remove(this._errorClass),e.classList.remove(this._inputInvalidClass)}checkInputValidity(e,t){e.validity.valid?this._hideInputError(e,t):this._showInputError(e,t)}_checkFormValidity=()=>this.inputElements.every((e=>e.validity.valid));_toggleButtonAbility=()=>{this._checkFormValidity()?this.enableButton(this.submitButton):this.disableButton(this.submitButton)};_setEventListeners(){this.inputElements=[...this._form.querySelectorAll(this._inputSelector)],this.submitButton=this._form.querySelector(this._submitButtonSelector),this.inputElements.forEach((e=>{e.addEventListener("input",(t=>{this.checkInputValidity(e),this._toggleButtonAbility(this.inputElements)}))}))}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault(),this.disableButton(this.submitButton)})),this._setEventListeners()}},t=class{constructor(e){let{data:t,cardSelector:o,handleImageClick:r,handleTrashClick:s,handleDeleteConfirm:i,toggleLike:n,removeLike:l}=e;this.name=t.name,this.link=t.link,this.alt=t.alt,this._id=t._id,this._cardSelector=o,this._handleImageClick=r,this._handleTrashClick=s,this._handleDeleteConfirm=i,this._toggleLike=n,this._removeLike=l}getId(){return this._id}removeCard(){this._element.remove()}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".gallery__card").cloneNode(!0)}getLikeStatus(){return this._likeButton.classList.contains("gallery__like-button_clicked")?this.likeStatus=!0:this.likeStatus=!1,this.likeStatus}_handleToggleLike(){this._likeButton.classList.toggle("gallery__like-button_clicked")}_setEventListeners(){this._likeButton.addEventListener("click",(()=>this._handleToggleLike())),this._likeButton.addEventListener("click",(()=>this._toggleLike())),this._trashButton.addEventListener("click",(()=>this._handleTrashClick())),this._cardPhoto.addEventListener("click",(()=>{this._handleImageClick({name:this.name,link:this.link})}))}getView(){return this._element=this._getTemplate(),this._cardPhoto=this._element.querySelector(".gallery__image"),this._likeButton=this._element.querySelector(".gallery__like-button"),this._trashButton=this._element.querySelector(".gallery__delete-button"),this._cardLabel=this._element.querySelector(".gallery__label"),this._cardPhoto.src=this.link,this._cardPhoto.alt=this.name,this._cardLabel.textContent=this.name,this._setEventListeners(),this._element}},o=class{constructor(e,t){let{items:o,renderer:r}=e;this._items=o,this._renderer=r,this._container=document.querySelector(t)}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}addItem(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"append";"append"===t&&this._container.append(e),"prepend"===t&&this._container.prepend(e)}},r=class{constructor(e){this.modalSelector=document.querySelector(e)}open(){this.modalSelector.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this.modalSelector.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose=e=>{"Escape"===e.key&&this.close()};setEventListeners(){this.currentCloseButton=this.modalSelector.querySelector(".modal__close"),this.currentCloseButton.addEventListener("click",this.close.bind(this)),this.modalContainer=this.modalSelector.querySelector(".modal__container"),this.modalSelector.addEventListener("mousedown",(e=>{e.stopPropagation();let t=!1;(e.target===this.modalContainer||this.modalContainer.contains(e.target))&&(t=!0),!1===t&&this.close()}))}},s=class extends r{constructor(e){let{modalSelector:t,handleSubmitForm:o}=e;super(t),this._modalSelector=document.querySelector(t),this._modalForm=this._modalSelector.querySelector(".modal__form"),this._handleSubmitForm=o}close(){this._modalForm.reset(),super.close()}_getInputValues(){const e=[...this._modalSelector.querySelectorAll(".modal__input")],t={};for(const o of e)t[o.name]=o.value;return t}setEventListeners(){this.modalSubmitButton=this._modalForm.querySelector(".modal__submit-button"),this._modalForm.addEventListener("submit",(e=>{e.preventDefault(),this.modalSubmitButton.textContent="Saving...",console.log(this.modalSubmitButton.textContent),this.data=this._getInputValues(),this._handleSubmitForm(this.data),this.close()})),super.setEventListeners()}};document.querySelector(".profile__title"),document.querySelector(".profile__subtitle");const i=document.querySelector("#title"),n=document.querySelector("#subtitle"),l=document.querySelector("#pfp-URL"),a=document.querySelector(".modal__save-button"),c=document.querySelector(".modal__create-button"),d=document.querySelector(".modal__savePfp-button"),h=document.querySelector("#profile-edit-button"),u=document.querySelector("#modal__form-person"),m=document.querySelector("#modal__form-img"),_=document.querySelector("#changePfp-modal"),p=document.querySelector("#profile-add-button"),b=new class{constructor(e){let{baseUrl:t}=e;this._baseUrl=t,this._headers={authorization:"6d7ae9eb-8869-410f-b35c-8e1dcc44f04b","Content-Type":"application/json"}}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{method:"GET",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject("Error"))).catch((e=>{console.error("Error. The request has failed: ",e)}))}editProfile(e){let{name:t,about:o}=e;return console.log("editing"),fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:t,about:o})}).then((e=>e.ok?e.json():Promise.reject("Error"))).catch((e=>{console.error("Error. The request has failed: ",e)}))}changePfp(e){let{avatar:t}=e;return console.log("changing pfp"),fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:t})}).then((e=>e.ok?e.json():Promise.reject("Error"))).catch((e=>{console.error("Error. The request has failed: ",e),alert("Error. The request has failed ",e)}))}addNewCard(e){let{name:t,link:o}=e;return console.log("adding"),fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:t,link:o})}).then((e=>e.ok?e.json():Promise.reject("Error"))).catch((e=>{console.error("Error. The request has failed: ",e)}))}deleteCard(e){let{cardId:t}=e;return console.log("deleting"),fetch(`${this._baseUrl}/cards/${t}`,{method:"DELETE",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject("Error"))).catch((e=>{console.error("Error. The request has failed: ",e)}))}addLike(e){let{cardId:t,isLiked:o}=e;return fetch(`${this._baseUrl}/cards/${t}/likes`,{method:"PUT",headers:this._headers,body:JSON.stringify({isLiked:o})}).then((e=>e.ok?e.json():Promise.reject("Error"))).catch((e=>{console.error("Error. The request has failed: ",e)}))}removeLike(e){let{cardId:t}=e;return fetch(`${this._baseUrl}/cards/${t}/likes`,{method:"DELETE",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject("Error"))).catch((e=>{console.error("Error. The request has failed: ",e)}))}}({baseUrl:"https://around-api.en.tripleten-services.com/v1"}),S=new class extends r{constructor(e){super(e),this._boxPhoto=document.querySelector(".modal__box-photo"),this._boxTitle=document.querySelector(".modal__box-title")}open(e){this._boxPhoto.src=e.link,this._boxPhoto.alt=e.name,this._boxTitle.textContent=e.name,super.open()}setEventListeners(){super.setEventListeners()}}("#photo-modal"),g=e=>{S.open(e)};S.setEventListeners();const f=".gallery__grid";let v="append";const k=e=>{const o=new t({data:e,cardSelector:"#card-template",handleImageClick:g,handleTrashClick:()=>{const e=o.getId();y.open(o,e)},toggleLike:()=>{const e=o.getId(),t=o.getLikeStatus();t?b.addLike({cardId:e,isLiked:t}).then((t=>{console.log(`liking: ${e}`),console.log(t)})):b.removeLike({cardId:e,isLiked:t}).then((t=>{console.log(`disliking: ${e}`),console.log(t)}))}}),r=o.getView();return E.addItem(r,v),{card:o,cardId:o.getId()}},E=new o({items:[],renderer:k},f),y=new class extends r{constructor(e){let{modalSelector:t,handleConfirmAction:o}=e;super(t),this._modalSelector=document.querySelector(t),this._modalConfirmBox=this._modalSelector.querySelector(".modal__confirm-box"),this._handleConfirmAction=o,this.isSubmitted=!1}open(e,t){this._currentCard=e,this._cardId=t,super.open()}close(){super.close()}getIsSubmitted(){return this.isSubmitted}setEventListeners(){this._modalConfirmBox.addEventListener("submit",(e=>{e.preventDefault(),this.close(),this.isSubmitted=!0,this._handleConfirmAction(this._currentCard,this._cardId),this.close()})),super.setEventListeners()}}({modalSelector:"#confirm-modal",handleConfirmAction:(e,t)=>{const o=!y.getIsSubmitted();console.log(`not submitted: ${o}`),y.getIsSubmitted()?(b.deleteCard({cardId:t}).then((e=>{console.log(e,t)})),e.removeCard(),console.log(`deleting: ${t}`)):console.log("no submission")}});y.setEventListeners(),b.getInitialCards().then((e=>{new o({items:e,renderer:k},f).renderItems()}));const L=new class{constructor(e){let{profileNameSelector:t,profileJobSelector:o,profilePictureSelector:r}=e;this._profileName=document.querySelector(t),this._profileJob=document.querySelector(o),this._profilePicture=document.querySelector(r)}getUserInfo(){const e={name:"",job:"",picture:""};return e.name=this._profileName.textContent,e.job=this._profileJob.textContent,e.picture=this._profilePicture.src,e}setUserInfo(e){let{name:t,job:o}=e;this._profileName.textContent=t,this._profileJob.textContent=o}setUserPicture(e){let{picture:t}=e;this._profilePicture.src=t}}({profileNameSelector:".profile__title",profileJobSelector:".profile__subtitle",profilePictureSelector:".profile__picture"}),C=new s({modalSelector:"#profile-edit-modal",handleSubmitForm:e=>{console.log(e),b.editProfile({name:e.title,about:e.subtitle}).then((e=>{console.log(e)})),L.setUserInfo({name:e.title,job:e.subtitle})}}),q=new s({modalSelector:"#changePfp-modal",handleSubmitForm:e=>{console.log(e.pfpURL),console.log(`change pfp url to: ${e.pfpURL} `),b.changePfp({avatar:`${e.pfpURL}`}).then((e=>{console.log(e)})),L.setUserPicture({picture:e.pfpURL})}});document.querySelector(".profile__picture-container").addEventListener("click",(()=>{q.open(),console.log(d),d.textContent="Save";const{picture:e}=L.getUserInfo();l.value=e})),q.setEventListeners(),h.addEventListener("click",(()=>{C.open(),a.textContent="Save";const{name:e,job:t}=L.getUserInfo();i.value=e,n.value=t})),C.setEventListeners();const I=new s({modalSelector:"#img-create-modal",handleSubmitForm:e=>{console.log(e),console.log(e.imgTitle,e.imgURL),b.addNewCard({name:e.imgTitle,link:e.imgURL}).then((e=>{const t={name:e.name,link:e.link,alt:e.name,_id:e._id};v="prepend",k(t)}))}});p.addEventListener("click",(()=>{I.open(),c.textContent="Create"})),I.setEventListeners();const P={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__submit-button",inactiveButtonClass:"modal__submit-button:disabled",inputInvalidClass:"modal__input_invalid",inputErrorClass:"modal__error",errorClass:"modal__error_visible"};function B(t,o){const r=new e(t,o);return r.enableValidation(),r}B(P,u),B(P,m),B(P,_)}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,